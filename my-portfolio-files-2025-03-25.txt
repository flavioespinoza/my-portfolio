===== src/app/commits/page.tsx =====
'use client'

import { useEffect, useState } from 'react'
import { Bar } from 'react-chartjs-2'
import { BarElement, CategoryScale, Chart, LinearScale, Tooltip } from 'chart.js'
import dayjs from 'dayjs'
import weekOfYear from 'dayjs/plugin/weekOfYear'
import Papa from 'papaparse'

Chart.register(BarElement, CategoryScale, LinearScale, Tooltip)
dayjs.extend(weekOfYear)

interface Commit {
	project: string
	branch: string
	date: string
	author: string
	message: string
}

function formatGroupKey(date: string, unit: 'day' | 'month' | 'week' | 'year') {
	const d = dayjs(date)
	switch (unit) {
		case 'day':
			return d.format('MMM D, YYYY')
		case 'month':
			return d.format('MMM YYYY')
		case 'week':
			return `Week ${d.week()} ${d.year()}`
		case 'year':
			return d.format('YYYY')
	}
}

function getBarLabels(data: Commit[], unit: 'day' | 'month' | 'week' | 'year'): string[] {
	const grouped: Record<string, number> = {}
	data.forEach((c) => {
		const key = formatGroupKey(c.date, unit)
		grouped[key] = (grouped[key] || 0) + 1
	})
	return Object.keys(grouped)
}

function getBarCounts(data: Commit[], unit: 'day' | 'month' | 'week' | 'year'): number[] {
	const grouped: Record<string, number> = {}
	data.forEach((c) => {
		const key = formatGroupKey(c.date, unit)
		grouped[key] = (grouped[key] || 0) + 1
	})
	return Object.values(grouped)
}

function highlight(text: string, keyword: string) {
	if (!keyword) return text
	const regex = new RegExp(`(${keyword})`, 'gi')
	return text.replace(regex, '<mark>$1</mark>')
}

export default function CommitsPage() {
	const [commits, setCommits] = useState<Commit[]>([])
	const [filtered, setFiltered] = useState<Commit[]>([])
	const [csvUrl, setCsvUrl] = useState('')
	const [search, setSearch] = useState('')
	const [groupBy, setGroupBy] = useState<'day' | 'month' | 'week' | 'year'>('day')
	const [projectFilter, setProjectFilter] = useState('all')

	useEffect(() => {
		const params = new URLSearchParams(window.location.search)
		const initialSearch = params.get('search')
		const initialProject = params.get('project')
		const initialGroupBy = params.get('groupBy')

		if (initialSearch) setSearch(initialSearch)
		if (initialProject) setProjectFilter(initialProject)
		if (initialGroupBy) setGroupBy(initialGroupBy as any)

		fetch('/commits/all-commits.json')
			.then((res) => res.json())
			.then((data) => setCommits(data))
			.catch((err) => console.error('Failed to load commits:', err))
	}, [])

	useEffect(() => {
		const filtered = commits
			.filter(
				(c) =>
					(projectFilter === 'all' || c.project === projectFilter) &&
					JSON.stringify(c).toLowerCase().includes(search.toLowerCase())
			)
			.sort((a, b) => dayjs(b.date).valueOf() - dayjs(a.date).valueOf())

		setFiltered(filtered)

		const csv = Papa.unparse(
			filtered.map(({ project, branch, date, author, message }) => ({
				project,
				branch,
				date,
				author,
				message
			}))
		)
		const blob = new Blob([csv], { type: 'text/csv' })
		setCsvUrl(URL.createObjectURL(blob))
	}, [commits, search, projectFilter, groupBy])

	return (
		<main className="mx-auto max-w-6xl space-y-6 p-6">
			<h1 className="text-3xl font-bold">GitHub Contributions</h1>

			<div className="mb-2 flex flex-wrap justify-end gap-4 text-right text-sm">
				<div>
					<label className="mr-2">Project</label>
					<select
						value={projectFilter}
						onChange={(e) => {
							const val = e.target.value
							setProjectFilter(val)
							const url = new URL(window.location.href)
							url.searchParams.set('project', val)
							window.history.replaceState(null, '', url.toString())
						}}
						className="rounded border p-1 text-sm"
					>
						<option value="all">All</option>
						{[...new Set(commits.map((c) => c.project))].sort().map((p) => (
							<option key={p} value={p}>
								{p}
							</option>
						))}
					</select>
				</div>

				<div>
					<label className="mr-2">Group by</label>
					<select
						value={groupBy}
						onChange={(e) => {
							const val = e.target.value
							setGroupBy(val as any)
							const url = new URL(window.location.href)
							url.searchParams.set('groupBy', val)
							window.history.replaceState(null, '', url.toString())
						}}
						className="rounded border p-1 text-sm"
					>
						<option value="day">Day</option>
						<option value="month">Month</option>
						<option value="week">Week</option>
						<option value="year">Year</option>
					</select>
				</div>
			</div>

			<input
				type="text"
				placeholder="Search commits..."
				value={search}
				onChange={(e) => {
					const val = e.target.value
					setSearch(val)
					const url = new URL(window.location.href)
					url.searchParams.set('search', val)
					window.history.replaceState(null, '', url.toString())
				}}
				className="border-muted mb-4 w-full rounded border p-2 text-sm"
			/>

			<div className="my-6">
				<Bar
					data={{
						labels: getBarLabels(filtered, groupBy),
						datasets: [
							{
								label: 'Commits',
								data: getBarCounts(filtered, groupBy),
								backgroundColor: '#4f46e5'
							}
						]
					}}
					options={{
						responsive: true,
						scales: { y: { beginAtZero: true } }
					}}
					height={100}
				/>
			</div>

			{csvUrl && (
				<a
					href={csvUrl}
					download="filtered-commits.csv"
					className="mt-2 block text-sm text-blue-500 underline"
				>
					Export Filtered Results as CSV
				</a>
			)}

			<table className="border-border w-full table-auto overflow-hidden rounded-lg border text-sm shadow-sm">
				<thead>
					<tr className="bg-muted text-muted-foreground text-xs font-semibold uppercase tracking-wide">
						<th className="px-3 py-2 text-left">Date</th>
						<th className="px-3 py-2 text-left">Project</th>
						<th className="px-3 py-2 text-left">Branch</th>
						<th className="px-3 py-2 text-left">Author</th>
						<th className="px-3 py-2 text-left">Message</th>
					</tr>
				</thead>
				<tbody className="divide-border divide-y">
					{filtered.map((commit, i) => (
						<tr key={i} className="border-b">
							<td className="px-3 py-2">{commit.date}</td>
							<td className="px-3 py-2">{commit.project}</td>
							<td className="px-3 py-2">{commit.branch}</td>
							<td className="px-3 py-2">{commit.author}</td>
							<td
								className="whitespace-pre-wrap px-3 py-2"
								dangerouslySetInnerHTML={{ __html: highlight(commit.message, search) }}
							/>
						</tr>
					))}
				</tbody>
			</table>
		</main>
	)
}
===== src/app/contact/page.tsx =====
'use client'

import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Github, Linkedin, Mail } from 'lucide-react'

export default function ContactPage() {
	return (
		<main className="mx-auto max-w-xl space-y-6 p-6">
			<h1 className="text-3xl font-bold">Contact</h1>

			<p className="text-muted-foreground">
				Feel free to reach out via email, GitHub, or LinkedIn. I'm currently open to freelance or
				full-time front-end/AI opportunities.
			</p>

			<div className="space-y-2 text-sm">
				<p className="flex items-center gap-2">
					<Mail className="h-4 w-4" />
					<a href="mailto:flavio.espinoza@gmail.com" className="underline">
						flavio.espinoza@gmail.com
					</a>
				</p>
				<p className="flex items-center gap-2">
					<Github className="h-4 w-4" />
					<a
						href="https://github.com/flavioespinoza"
						className="underline"
						target="_blank"
						rel="noreferrer"
					>
						github.com/flavioespinoza
					</a>
				</p>
				<p className="flex items-center gap-2">
					<Linkedin className="h-4 w-4" />
					<a
						href="https://www.linkedin.com/in/flavioespinoza"
						className="underline"
						target="_blank"
						rel="noreferrer"
					>
						linkedin.com/in/flavioespinoza
					</a>
				</p>
			</div>

			<form className="space-y-4">
				<Input placeholder="Your email" type="email" />
				<Textarea placeholder="Your message" rows={5} />
				<Button type="submit">Send</Button>
			</form>
		</main>
	)
}
===== src/app/projects/page.tsx =====
'use client'

export default function ProjectsPage() {
	return (
		<main className="mx-auto max-w-4xl space-y-12 p-6">
			<h1 className="text-center text-3xl font-bold">Projects</h1>

			<section className="space-y-3 rounded-lg border p-6 shadow-sm">
				<h2 className="text-primary text-2xl font-semibold">AI Chat Assistant</h2>
				<p className="text-muted-foreground">
					A GPT-4o powered chatbot with theme toggle, Zustand chat state, and real-time streaming.
				</p>
				<iframe
					loading="lazy"
					src="https://yourdomain.com/embed?prompt=Hello&type=bar"
					width="100%"
					height="400"
					className="w-full rounded-md border shadow-sm"
				/>
			</section>

			<section className="space-y-3 rounded-lg border p-6 shadow-sm">
				<h2 className="text-primary text-2xl font-semibold">LLM Data Visualizer</h2>
				<p className="text-muted-foreground">
					Transforms user prompts into JSON and visualizes with D3.js — supports bar, line, and pie
					charts.
				</p>
				<iframe
					loading="lazy"
					src="https://yourdomain.com/embed?prompt=Show+sales+for+A%2C+B%2C+C&type=bar"
					width="100%"
					height="400"
					className="w-full rounded-md border shadow-sm"
				/>
			</section>
		</main>
	)
}
===== src/app/about/page.tsx =====
export default function AboutPage() {
	return (
		<main className="mx-auto max-w-3xl space-y-8 p-6">
			<h1 className="text-3xl font-bold">About Me</h1>

			<section className="space-y-3">
				<p>
					I'm Flavio Espinoza — a senior front-end engineer with 11+ years of experience crafting
					user-facing applications with React, TypeScript, and modern UI tooling.
				</p>
				<p>
					I specialize in building responsive, accessible, and theme-aware interfaces with
					frameworks like Next.js, Tailwind CSS, and Zustand. Lately, I've been exploring AI tools
					and LLMs to build intelligent user interfaces — such as GPT-powered chat systems and data
					visualization engines.
				</p>
				<p>
					I also have a background in architecture, having earned a master's degree and multiple
					design awards. This informs my approach to visual hierarchy, layout, and interaction
					patterns.
				</p>
				<p>
					I'm currently open to remote roles or opportunities in Salt Lake City, Utah (or nearby).
					Let’s connect and create something meaningful.
				</p>
			</section>
		</main>
	)
}
===== src/app/layout.tsx =====
import type { Metadata } from 'next'
import { Footer } from '@/components/layout/footer'
import { Navbar } from '@/components/layout/navbar'
import '@/styles/globals.css'

export const metadata: Metadata = {
	title: 'Flavio Espinoza | Portfolio',
	description: 'Frontend + AI Projects, Commit Tracker, and Visual Demos'
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
	return (
		<html lang="en">
			<body className="bg-background flex min-h-screen flex-col antialiased">
				<Navbar />
				<main className="flex-1">{children}</main>
				<Footer />
			</body>
		</html>
	)
}
===== src/app/page.tsx =====
'use client'

import { Button } from '@/components/ui/button'
import { Moon, Sun } from 'lucide-react'

export default function HomePage() {
	return (
		<main className="mx-auto max-w-2xl space-y-6 p-6 text-center">
			<div className="flex justify-end"></div>
			<h1 className="text-4xl font-bold">Flavio Espinoza</h1>
			<p className="text-muted-foreground text-lg">
				Front-End Developer & AI Builder · React · Next.js · Tailwind · LLMs
			</p>
			<div className="space-x-4">
				<Button>
					<a href="/projects">View Projects</a>
				</Button>
				<Button variant="secondary">
					<a href="/about">About Me</a>
				</Button>
			</div>
		</main>
	)
}
===== src/components/ui/tabs.tsx =====
'use client'

import React from 'react'
import * as TabsPrimitive from '@radix-ui/react-tabs'
import { cn } from '@/lib/utils'

export const Tabs = TabsPrimitive.Root

export const TabsList = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.List>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.List
		ref={ref}
		className={cn(
			'bg-muted text-muted-foreground inline-flex h-10 items-center justify-center rounded-md p-1',
			className
		)}
		{...props}
	/>
))
TabsList.displayName = TabsPrimitive.List.displayName

export const TabsTrigger = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.Trigger>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.Trigger
		ref={ref}
		className={cn(
			'ring-offset-background hover:text-foreground focus-visible:ring-ring data-[state=active]:bg-background data-[state=active]:text-foreground inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
			className
		)}
		{...props}
	/>
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

export const TabsContent = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.Content
		ref={ref}
		className={cn('mt-2 rounded-md border p-6', className)}
		{...props}
	/>
))
TabsContent.displayName = TabsPrimitive.Content.displayName
===== src/components/ui/card.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'

export function Card({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <div className={cn('bg-background rounded-xl border shadow-sm', className)} {...props} />
}

export function CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <div className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />
}

export function CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {
	return (
		<h3
			className={cn('text-2xl font-semibold leading-none tracking-tight', className)}
			{...props}
		/>
	)
}

export function CardDescription({
	className,
	...props
}: React.HTMLAttributes<HTMLParagraphElement>) {
	return <p className={cn('text-muted-foreground text-sm', className)} {...props} />
}

export function CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <div className={cn('p-6 pt-0', className)} {...props} />
}

export function CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <div className={cn('flex items-center p-6 pt-0', className)} {...props} />
}
===== src/components/ui/tooltip.tsx =====
'use client'

import * as TooltipPrimitive from '@radix-ui/react-tooltip'
import { cn } from '@/lib/utils'

export function Tooltip({
	children,
	content,
	delay = 300,
	...props
}: {
	children: React.ReactNode
	content: string
	delay?: number
}) {
	return (
		<TooltipPrimitive.Provider delayDuration={delay}>
			<TooltipPrimitive.Root>
				<TooltipPrimitive.Trigger asChild>{children}</TooltipPrimitive.Trigger>
				<TooltipPrimitive.Portal>
					<TooltipPrimitive.Content
						className={cn(
							'z-50 overflow-hidden rounded-md bg-black px-2 py-1 text-xs text-white shadow-md'
						)}
						sideOffset={4}
						{...props}
					>
						{content}
						<TooltipPrimitive.Arrow className="fill-black" />
					</TooltipPrimitive.Content>
				</TooltipPrimitive.Portal>
			</TooltipPrimitive.Root>
		</TooltipPrimitive.Provider>
	)
}
===== src/components/ui/alert.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'
import { AlertTriangle, CheckCircle2, Info } from 'lucide-react'

export type AlertType = 'info' | 'success' | 'warning' | 'error'

const iconMap = {
	info: Info,
	success: CheckCircle2,
	warning: AlertTriangle,
	error: AlertTriangle
}

export function Alert({
	title,
	message,
	type = 'info',
	className
}: {
	title?: string
	message: string
	type?: AlertType
	className?: string
}) {
	const Icon = iconMap[type]
	return (
		<div className={cn('flex items-start gap-3 rounded-md border px-4 py-3 text-sm', className)}>
			<Icon className="text-muted-foreground mt-0.5 h-5 w-5" />
			<div>
				{title && <div className="font-medium">{title}</div>}
				<div>{message}</div>
			</div>
		</div>
	)
}
===== src/components/ui/dialog.tsx =====
'use client'

import * as DialogPrimitive from '@radix-ui/react-dialog'
import { cn } from '@/lib/utils'
import { X } from 'lucide-react'

export const Dialog = DialogPrimitive.Root
export const DialogTrigger = DialogPrimitive.Trigger

export function DialogContent({
	title,
	description,
	children
}: {
	title: string
	description?: string
	children?: React.ReactNode
}) {
	return (
		<DialogPrimitive.Portal>
			<DialogPrimitive.Overlay className="fixed inset-0 z-40 bg-black/40 backdrop-blur-sm" />
			<DialogPrimitive.Content className="bg-background fixed left-1/2 top-1/2 z-50 w-full max-w-lg -translate-x-1/2 -translate-y-1/2 rounded-lg p-6 shadow-lg outline-none">
				<div className="mb-4 flex items-center justify-between">
					<h2 className="text-lg font-semibold">{title}</h2>
					<DialogPrimitive.Close className="text-muted-foreground hover:text-foreground">
						<X className="h-4 w-4" />
					</DialogPrimitive.Close>
				</div>
				{description && <p className="text-muted-foreground mb-2 text-sm">{description}</p>}
				<div>{children}</div>
			</DialogPrimitive.Content>
		</DialogPrimitive.Portal>
	)
}
===== src/components/ui/button.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'
import { type VariantProps, cva } from 'class-variance-authority'

const buttonVariants = cva(
	'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ring-offset-background',
	{
		variants: {
			variant: {
				default: 'bg-primary text-primary-foreground hover:bg-primary/90',
				secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
				outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
				ghost: 'hover:bg-accent hover:text-accent-foreground',
				link: 'text-primary underline-offset-4 hover:underline'
			},
			size: {
				default: 'h-10 px-4 py-2',
				sm: 'h-9 px-3 rounded-md',
				lg: 'h-11 px-8 rounded-md',
				icon: 'h-10 w-10'
			}
		},
		defaultVariants: {
			variant: 'default',
			size: 'default'
		}
	}
)

export interface ButtonProps
	extends React.ButtonHTMLAttributes<HTMLButtonElement>,
		VariantProps<typeof buttonVariants> {}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
	({ className, variant, size, ...props }, ref) => {
		return (
			<button className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
		)
	}
)
Button.displayName = 'Button'

export { Button, buttonVariants }
===== src/components/ui/select.tsx =====
'use client'

import * as React from 'react'
import { cn } from '@/lib/utils'
import {
	Select as RadixSelect,
	SelectContent,
	SelectGroup,
	SelectItem,
	SelectLabel,
	SelectTrigger,
	SelectValue
} from '@radix-ui/react-select'

interface SelectProps {
	value: string
	onValueChange: (value: string) => void
	options: { label: string; value: string }[]
	placeholder?: string
	className?: string
}

export function Select({ value, onValueChange, options, placeholder, className }: SelectProps) {
	return (
		<RadixSelect value={value} onValueChange={onValueChange}>
			<SelectTrigger className={cn('h-10 w-full rounded border px-3 py-2 text-sm', className)}>
				<SelectValue placeholder={placeholder || 'Select'} />
			</SelectTrigger>
			<SelectContent>
				<SelectGroup>
					<SelectLabel>{placeholder}</SelectLabel>
					{options.map((opt) => (
						<SelectItem key={opt.value} value={opt.value}>
							{opt.label}
						</SelectItem>
					))}
				</SelectGroup>
			</SelectContent>
		</RadixSelect>
	)
}
===== src/components/ui/textarea.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'

export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
	({ className, ...props }, ref) => {
		return (
			<textarea
				className={cn(
					'border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex min-h-[80px] w-full rounded-md border px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
					className
				)}
				ref={ref}
				{...props}
			/>
		)
	}
)
Textarea.displayName = 'Textarea'

export { Textarea }
===== src/components/ui/input.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
	({ className, type, ...props }, ref) => {
		return (
			<input
				type={type}
				className={cn(
					'border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
					className
				)}
				ref={ref}
				{...props}
			/>
		)
	}
)
Input.displayName = 'Input'

export { Input }
===== src/components/layout/navbar.tsx =====
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { cn } from '@/lib/utils'
import { Menu, Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'
import { useState } from 'react'

const links = [
  { href: '/', label: 'Home' },
  { href: '/projects', label: 'Projects' },
  { href: '/commits', label: 'Commits' },
  { href: '/about', label: 'About' }
]

export function Navbar() {
  const pathname = usePathname()
  const [open, setOpen] = useState(false)
  const { theme, setTheme } = useTheme()

  return (
    <nav className="sticky top-0 z-50 bg-background/95 backdrop-blur border-b px-6 py-3 transition-all">
      <div className="mx-auto max-w-5xl flex items-center justify-between gap-4">
        <div className="font-bold text-lg">Flavio</div>

        {/* Desktop Nav */}
        <div className="hidden md:flex items-center gap-4 text-sm">
          {links.map(({ href, label }) => (
            <Link
              key={href}
              href={href}
              className={cn(
                'transition-colors hover:text-foreground',
                pathname === href ? 'text-foreground font-medium' : 'text-muted-foreground'
              )}
            >
              {label}
            </Link>
          ))}
        </div>

        <div className="flex items-center gap-2 ml-auto">
          <button
            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
            className="hidden md:inline-flex text-muted-foreground hover:text-foreground transition"
          >
            {theme === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
          </button>
          <button onClick={() => setOpen(!open)} className="md:hidden text-muted-foreground hover:text-foreground transition">
            <Menu className="h-5 w-5" />
          </button>
        </div>
      </div>

      {/* Mobile Nav Dropdown */}
      <div
        className={cn(
          'transition-all overflow-hidden md:hidden',
          open ? 'max-h-64 opacity-100' : 'max-h-0 opacity-0'
        )}
      >
        <div className="flex flex-col mt-2 space-y-1 text-sm">
          {links.map(({ href, label }) => (
            <Link
              key={href}
              href={href}
              onClick={() => setOpen(false)}
              className={cn(
                'px-6 py-2 transition-colors hover:text-foreground',
                pathname === href ? 'text-foreground font-medium' : 'text-muted-foreground'
              )}
            >
              {label}
            </Link>
          ))}
        </div>
      </div>
    </nav>
  )
}
===== src/components/layout/container.tsx =====
import { cn } from '@/lib/utils'

export function Container({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <div className={cn('mx-auto max-w-5xl px-6', className)} {...props} />
}
===== src/components/layout/section.tsx =====
import { cn } from '@/lib/utils'

export function Section({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <section className={cn('space-y-6 py-12', className)} {...props} />
}
===== src/components/layout/footer.tsx =====
export function Footer() {
	return (
		<footer className="text-muted-foreground w-full border-t px-6 py-4 text-center text-sm">
			Built by Flavio Espinoza — © {new Date().getFullYear()}
		</footer>
	)
}
===== src/lib/utils.ts =====
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs))
}
===== src/lib/store/chat-store.ts =====
import { create } from 'zustand'

interface Message {
	role: 'user' | 'assistant'
	content: string
}

interface ChatStore {
	messages: Message[]
	addMessage: (msg: Message) => void
	setMessages: (msgs: Message[]) => void
}

export const useChatStore = create<ChatStore>((set) => ({
	messages: [],
	addMessage: (msg) => set((state) => ({ messages: [...state.messages, msg] })),
	setMessages: (msgs) => set({ messages: msgs })
}))
