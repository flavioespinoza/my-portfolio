===== src/app/commits/page.tsx =====
'use client'

import { useCallback, useEffect, useState } from 'react'
import { MorphingChart } from '@flavioespinoza/salsa-ui'
import Papa from 'papaparse'

interface CommitData {
	project: string
	branch: string
	date: string
	author: string
	message: string
}

interface Commit {
	project: string
	branch: string
	date: string
	author: string
	message: string
}

function highlight(text: string, keyword: string) {
	if (!keyword) return text
	const regex = new RegExp(`(${keyword})`, 'gi')
	return text.replace(regex, '<mark>$1</mark>')
}

export default function CommitsPage() {
	const [filtered, setFiltered] = useState<Commit[]>([])
	const [csvUrl, setCsvUrl] = useState('')
	const [search, setSearch] = useState('')
	const [groupBy, setGroupBy] = useState<'day' | 'month' | 'week' | 'year'>('day')
	const [projectFilter, setProjectFilter] = useState('all')

	// Define getFiltered without filtered in dependencies
	const getFiltered = useCallback(
		(filteredCommits: CommitData[]): Commit[] => {
			console.log('getFiltered called')
			setFiltered(filteredCommits)
			return filteredCommits
		},
		[search, projectFilter]
	)

	// Generate CSV URL when filtered commits change
	useEffect(() => {
		const csv = Papa.unparse(
			filtered.map(({ project, branch, date, author, message }) => ({
				project,
				branch,
				date,
				author,
				message
			}))
		)
		const blob = new Blob([csv], { type: 'text/csv' })
		const newUrl = URL.createObjectURL(blob)
		setCsvUrl(newUrl)

		// Cleanup previous URL
		return () => {
			URL.revokeObjectURL(newUrl)
		}
	}, [filtered])

	return (
		<main className="mx-auto max-w-6xl space-y-6 p-6">
			<h1 className="text-3xl font-bold">GitHub Contributions</h1>

			<div className="mb-2 flex flex-wrap justify-end gap-4 text-right text-sm">
				<div>
					<label className="mr-2">Project</label>
					<select
						value={projectFilter}
						onChange={(e) => {
							const val = e.target.value
							setProjectFilter(val)
							const url = new URL(window.location.href)
							url.searchParams.set('project', val)
							window.history.replaceState(null, '', url.toString())
						}}
						className="rounded border p-1 text-sm"
					>
						<option value="all">All</option>
						{[...new Set(filtered.map((c) => c.project))].sort().map((p) => (
							<option key={p} value={p}>
								{p}
							</option>
						))}
					</select>
				</div>

				<div>
					<label className="mr-2">Group by</label>
					<select
						value={groupBy}
						onChange={(e) => {
							const val = e.target.value as 'day' | 'month' | 'week' | 'year'
							setGroupBy(val)
							const url = new URL(window.location.href)
							url.searchParams.set('groupBy', val)
							window.history.replaceState(null, '', url.toString())
						}}
						className="rounded border p-1 text-sm"
					>
						<option value="day">Day</option>
						<option value="month">Month</option>
						<option value="week">Week</option>
						<option value="year">Year</option>
					</select>
				</div>
			</div>

			<input
				type="text"
				placeholder="Search commits..."
				value={search}
				onChange={(e) => {
					const val = e.target.value
					setSearch(val)
					const url = new URL(window.location.href)
					url.searchParams.set('search', val)
					window.history.replaceState(null, '', url.toString())
				}}
				className="mb-4 w-full rounded border border-muted p-2 text-sm"
			/>
			<div className="my-6">
				<MorphingChart {...{ projectFilter, search, groupBy, getFiltered }} />
			</div>

			{csvUrl && (
				<a
					href={csvUrl}
					download="filtered-commits.csv"
					className="mt-2 block text-sm text-blue-500 underline"
				>
					Export Filtered Results as CSV
				</a>
			)}

			<a
				href="/api/commits"
				target="_blank"
				rel="noopener noreferrer"
				className="mt-4 block text-sm text-blue-500 underline"
			>
				View or download all-commits.json
			</a>

			<table className="w-full table-auto overflow-hidden rounded-lg border border-border text-sm shadow-sm">
				<thead>
					<tr className="bg-muted text-xs font-semibold uppercase tracking-wide text-muted-foreground">
						<th className="px-3 py-2 text-left">Date</th>
						<th className="px-3 py-2 text-left">Project</th>
						<th className="px-3 py-2 text-left">Branch</th>
						<th className="px-3 py-2 text-left">Author</th>
						<th className="px-3 py-2 text-left">Message</th>
					</tr>
				</thead>
				<tbody className="divide-y divide-border">
					{filtered.map((commit, i) => (
						<tr key={i} className="border-b">
							<td className="px-3 py-2">{commit.date}</td>
							<td className="px-3 py-2">{commit.project}</td>
							<td className="px-3 py-2">{commit.branch}</td>
							<td className="px-3 py-2">{commit.author}</td>
							<td
								className="whitespace-pre-wrap px-3 py-2"
								dangerouslySetInnerHTML={{ __html: highlight(commit.message, search) }}
							/>
						</tr>
					))}
				</tbody>
			</table>
		</main>
	)
}
===== src/app/contact/actions.ts =====
'use server'

import { z } from 'zod'

const contactFormSchema = z.object({
	email: z.string().email({ message: 'Invalid email address.' }),
	message: z.string().min(5, { message: 'Message must be at least 5 characters long.' }),
	website: z.string().optional()
})

type FormActionResult = { success: true; message: string } | { success: false; error: string }

export async function submitContactForm(formData: FormData): Promise<FormActionResult> {
	const parsed = contactFormSchema.safeParse({
		email: formData.get('email'),
		message: formData.get('message'),
		website: formData.get('website')
	})

	if (!parsed.success) {
		const errorMessages = parsed.error.errors
			.map((e) => `${e.path.join('.')}: ${e.message}`)
			.join(', ')
		return { success: false, error: `Invalid form data: ${errorMessages}` }
	}

	if (parsed.data.website) {
		console.log('Bot submission detected (server-side).')
		return { success: false, error: 'There was an issue submitting the form.' }
	}

	const formspreeEndpoint = process.env.FORMSPREE_ENDPOINT

	if (!formspreeEndpoint) {
		console.error('Formspree endpoint is not configured.')
		return { success: false, error: 'Server configuration error.' }
	}

	try {
		const res = await fetch(formspreeEndpoint, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Accept: 'application/json'
			},
			body: JSON.stringify({ email: parsed.data.email, message: parsed.data.message })
		})

		if (res.ok) {
			return { success: true, message: 'Message sent successfully!' }
		} else {
			const errorData = await res.json().catch(() => ({}))
			console.error(`Formspree submission failed (${res.status}):`, errorData)
			return {
				success: false,
				error: `Failed to send message (Status: ${res.status}). Please try again.`
			}
		}
	} catch (err) {
		console.error('Error submitting to Formspree:', err)
		return { success: false, error: 'An unexpected error occurred while sending the message.' }
	}
}
===== src/app/contact/page.tsx =====
'use client'

import { useRef, useState, useTransition } from 'react'
import { Button, Input, Textarea } from '@flavioespinoza/salsa-ui'
import { submitContactForm } from './actions'

export default function ContactPage() {
	const [formStatus, setFormStatus] = useState<{
		status: 'idle' | 'success' | 'error'
		message: string | null
	}>({ status: 'idle', message: null })
	const [isPending, startTransition] = useTransition()
	const formRef = useRef<HTMLFormElement>(null)
	const CALENDLY_URL = 'https://calendly.com/flavio-espinoza/chat-with-flavio'

	const handleFormSubmit = async (formData: FormData) => {
		setFormStatus({ status: 'idle', message: null })

		startTransition(async () => {
			const result = await submitContactForm(formData)

			if (result.success) {
				setFormStatus({ status: 'success', message: result.message })
				formRef.current?.reset()
			} else {
				setFormStatus({ status: 'error', message: result.error })
			}
		})
	}

	const testBotSubmission = () => {
		const form = document.querySelector('form')
		if (!form) {
			console.error('‚ùå Form not found')
			return
		}

		const inputs = form.querySelectorAll('input, textarea')
		inputs.forEach((input) => {
			;(input as HTMLInputElement).value = 'bot test value'
			console.log(`‚úèÔ∏è Filled ${input.getAttribute('name') || 'unnamed field'} with test value`)
		})

		const submitEvent = new Event('submit', { bubbles: true, cancelable: true })
		form.dispatchEvent(submitEvent)
	}

	if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
		;(window as any).testBotSubmission = testBotSubmission
	}

	return (
		<main className="mx-auto max-w-2xl space-y-8 p-6">
			<h1 className="text-3xl font-bold">Get in Touch</h1>

			<div className="space-y-2">
				<h2 className="text-xl font-semibold">üìß Send Me an Email</h2>
				<form ref={formRef} action={handleFormSubmit} className="space-y-4">
					<Input
						className="bg-cblue-200"
						type="email"
						name="email"
						placeholder="Your email"
						required
					/>
					<Textarea className="bg-cblue-200" name="message" placeholder="Your message" required />
					<div className="absolute left-[-9999px]" aria-hidden="true">
						<Input type="text" name="website" tabIndex={-1} autoComplete="off" />
					</div>
					<Button type="submit" disabled={isPending}>
						{' '}
						{isPending ? 'Sending...' : 'Send Message'}
					</Button>
					{formStatus.message && (
						<p
							className={`text-sm ${formStatus.status === 'success' ? 'text-green-600' : 'text-red-600'}`}
						>
							{formStatus.message}
						</p>
					)}
					{process.env.NEXT_PUBLIC_DEV_ONLY === 'true' && (
						<div className="mt-6 rounded-lg border bg-yellow-50 p-4">
							<h3 className="mb-2 font-medium text-yellow-800">Developer Tools</h3>
							<Button
								type="button"
								variant="outline"
								onClick={testBotSubmission}
								className="bg-yellow-100 text-yellow-800 hover:bg-yellow-200"
							>
								Test Bot Submission
							</Button>
							<p className="mt-2 text-sm text-yellow-700">
								Click to simulate a bot filling all fields (including honeypot)
							</p>
						</div>
					)}
				</form>
			</div>

			<div className="relative flex items-center py-4">
				<div className="flex-grow border-t border-cement"></div>
				<span className="mx-4 text-xl font-semibold text-charcoal">or</span>
				<div className="flex-grow border-t border-cement"></div>
			</div>

			<div className="space-y-2">
				<h2 className="text-xl font-semibold">üìÖ Let‚Äôs Chat ‚Äì Pick a Time</h2>
				<iframe
					src={CALENDLY_URL}
					height="900"
					className="w-full max-w-full rounded border"
				></iframe>
			</div>
		</main>
	)
}
===== src/app/about/page.tsx =====
export default function AboutPage() {
	return (
		<main className="mx-auto max-w-3xl space-y-8 px-6 py-12">
			<h1 className="text-4xl font-bold tracking-tight text-foreground">About Me</h1>

			<section className="space-y-4 text-base leading-relaxed text-muted-foreground">
				<p>
					Creative and technically versatile developer with 11+ years of experience building
					high-impact, production-grade applications using React.js, Node.js, and TypeScript. Proven
					ability to ship full-stack features end-to-end‚Äîfrom idea to production‚Äîacross Web3,
					FinTech, and AI-first platforms. Adept at collaborating directly with founders and product
					leaders in fast-paced startup environments. Strong background in real-time data systems,
					D3.js visualization, and OpenAI integration for AI-augmented development.
				</p>
			</section>
		</main>
	)
}
===== src/app/ai-llm-data-visualizer/page.tsx =====
'use client'

export default function ProjectsPage() {
	return (
		<main className="mx-auto max-w-6xl space-y-10 px-6 py-12">
			<iframe
				loading="lazy"
				src="https://ai-llm-data-visualizer-git-main-flavio-espinozas-projects.vercel.app"
				width="100%"
				height="1000"
				className="w-full rounded-md border shadow-sm"
			/>
		</main>
	)
}
===== src/app/fluid/page.tsx =====
'use client'

import * as React from 'react'
import { Button } from '@flavioespinoza/salsa-ui'

export default function FluidPage() {
	return (
		<div className="flex min-h-screen flex-col items-center justify-center p-6">
			<div className="max-w-2xl space-y-8 text-center">
				<h2 className="text-xl font-semibold">These are just experiments using fluid CSS</h2>
				<p>Resize the browser window and see the fluid transitions of the elements below.</p>
				<h1 className="~md/lg:~text-base/4xl">Quick increase</h1>
				<Button onClick={() => alert('Clicked!')}>Fluid Button</Button>
			</div>
		</div>
	)
}
===== src/app/layout.tsx =====
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { Footer } from '@/components/layout/footer'
import { Navbar } from '@/components/layout/navbar'
import '@/styles/globals.css'
import '@flavioespinoza/salsa-ui/dist/index.css'

const inter = Inter({
	subsets: ['latin'],
	weight: ['300', '400', '500', '700'], // Light (300), Regular (400), Medium (500), Bold (700)
	variable: '--font-inter'
})

export const metadata: Metadata = {
	title: 'Flavio Espinoza | Portfolio',
	description:
		'Senior Frontend Engineer specializing in React, TypeScript, and AI-powered interfaces.',
	metadataBase: new URL('https://my-portfolio.vercel.app'),
	icons: {
		icon: '/favicon.ico'
	},
	openGraph: {
		title: 'Flavio Espinoza | Portfolio',
		description:
			'Senior Frontend Engineer specializing in React, TypeScript, and AI-powered interfaces.',
		type: 'website',
		locale: 'en_US',
		url: '/',
		siteName: 'Flavio Espinoza Portfolio',
		images: [
			{
				url: '/og-image.png',
				width: 1200,
				height: 630,
				alt: 'Flavio Espinoza Portfolio'
			}
		]
	},
	twitter: {
		card: 'summary_large_image',
		title: 'Flavio Espinoza | Portfolio',
		description:
			'Senior Frontend Engineer specializing in React, TypeScript, and AI-powered interfaces.',
		images: ['/og-image.png'],
		creator: '@flavioespinoza'
	}
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
	return (
		<html lang="en" className={inter.className} suppressHydrationWarning>
			<head>
				<script
					type="application/ld+json"
					dangerouslySetInnerHTML={{
						__html: JSON.stringify({
							'@context': 'https://schema.org',
							'@type': 'Person',
							name: 'Flavio Espinoza',
							email: 'mailto:flavio.espinoza@gmail.com',
							url: 'https://my-portfolio.vercel.app',
							sameAs: [
								'https://github.com/flavioespinoza',
								'https://linkedin.com/in/flavioespinoza'
							],
							jobTitle: 'Senior Frontend Developer',
							address: {
								'@type': 'PostalAddress',
								addressLocality: 'Salt Lake City',
								addressRegion: 'UT',
								addressCountry: 'US'
							},
							alumniOf: {
								'@type': 'EducationalOrganization',
								name: 'University of Utah'
							},
							worksFor: {
								'@type': 'Organization',
								name: 'Bless Network'
							},
							hasOccupation: {
								'@type': 'Occupation',
								name: 'Frontend Engineer',
								skills: [
									'React',
									'Next.js',
									'TypeScript',
									'Tailwind CSS',
									'D3.js',
									'OpenAI API',
									'Zustand',
									'Zod',
									'Vercel'
								]
							},
							description:
								'Senior full-stack engineer with 11+ years of experience delivering responsive, performant, and accessible UI with React, TypeScript, and modern frameworks. Recent focus on LLM-powered applications using GPT-4o and D3.js for real-time visualization.'
						})
					}}
				/>
			</head>
			<body className={`${inter.variable} flex min-h-screen flex-col bg-background antialiased`}>
				<Navbar />
				<main className="flex-1">{children}</main>
				<Footer />
			</body>
		</html>
	)
}
===== src/app/api/gemini/route.ts =====
import { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {}
===== src/app/api/gemini/gemini.md =====
```bash
curl "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY" \
-H 'Content-Type: application/json' \
-X POST \
-d '{
  "contents": [{
    "parts":[{"text": "Explain how AI works"}]
    }]
   }'
```
===== src/app/api/chat/route.ts =====
import { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {
	const { messages } = await req.json()

	try {
		const res = await fetch('https://api.openai.com/v1/chat/completions', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Authorization: `Bearer ${process.env.OPENAI_API_KEY}`
			},
			body: JSON.stringify({
				model: 'gpt-4o-2024-05-13',
				messages,
				temperature: 0.7
			})
		})

		if (!res.ok) {
			const error = await res.text()
			console.error('OpenAI API error:', error)
			return NextResponse.json({ error: 'OpenAI API request failed' }, { status: 500 })
		}

		const json = await res.json()
		const reply = json.choices?.[0]?.message?.content || 'Sorry, something went wrong.'
		return NextResponse.json({ reply })
	} catch (err) {
		console.error('Chat error:', err)
		return NextResponse.json({ error: 'Server error' }, { status: 500 })
	}
}
===== src/app/page.tsx =====
'use client'

import { Button } from '@flavioespinoza/salsa-ui'

export default function HomePage() {
	return (
		<div className="mx-auto max-w-2xl space-y-6 p-6">
			<br />
			<h1 className="text-center text-4xl font-bold">Flavio Espinoza</h1>
			<p className="text-center text-lg text-muted-foreground">
				Full-Stack Developer & AI Builder ¬∑ React ¬∑ Next.js ¬∑ Tailwind ¬∑ Node.js ¬∑ ChatGPT ¬∑ OpenAI
				¬∑ LLMs
			</p>
			<p>
				Creative and technically versatile developer with 11+ years of experience building
				high-impact, production-grade applications using React.js, Node.js, and TypeScript. Proven
				ability to ship full-stack features end-to-end‚Äîfrom idea to production‚Äîacross Web3, FinTech,
				and AI-first platforms. Adept at collaborating directly with founders and product leaders in
				fast-paced startup environments. Strong background in real-time data systems, D3.js
				visualization, and OpenAI integration for AI-augmented development.{' '}
				<a
					href="https://github.com/flavioespinoza"
					target="_blank"
					style={{ color: 'blue' }}
					className="underline"
				>
					Check out my GitHub
				</a>
			</p>
		</div>
	)
}
===== src/app/ai-chat-assistant/components/chat-copy-button.tsx =====
'use client'

import { useState } from 'react'
import { Button, Tooltip } from '@flavioespinoza/salsa-ui'
import { Check, Copy } from 'lucide-react'

interface ChatCopyButtonProps {
	text: string
}

export function ChatCopyButton({ text }: ChatCopyButtonProps) {
	const [copied, setCopied] = useState(false)

	const handleCopy = async () => {
		await navigator.clipboard.writeText(text)
		setCopied(true)
		setTimeout(() => setCopied(false), 1500)
	}

	return (
		<Button
			type="button"
			variant="ghost"
			onClick={handleCopy}
			className="flex h-auto w-auto items-center p-1 text-xs text-black hover:bg-hotpink-300"
		>
			{copied ? (
				<Check className="h-4 w-4" />
			) : (
				<Tooltip content="Copy">
					<Copy className="h-4 w-4" />
				</Tooltip>
			)}
		</Button>
	)
}
===== src/app/ai-chat-assistant/components/chat-feedback.tsx =====
'use client'

import { useChatStore } from '@/store/chat-store'
import { Button } from '@flavioespinoza/salsa-ui'
import { ThumbsDown, ThumbsUp } from 'lucide-react'

interface ChatFeedbackProps {
	index: number
}

export function ChatFeedback({ index }: ChatFeedbackProps) {
	const { messages, updateMessageFeedback } = useChatStore()
	const feedback = messages[index]?.feedback || null

	return (
		<div className="flex items-center space-x-1">
			<Button
				type="button"
				variant="ghost"
				size="icon"
				onClick={() => updateMessageFeedback(index, 'up')}
				className="h-6 w-6 p-1 hover:bg-hotpink-300"
			>
				<ThumbsUp
					className={`h-4 w-4 ${feedback === 'up' ? 'fill-black text-black' : 'text-black'}`}
				/>
			</Button>
			<Button
				type="button"
				variant="ghost"
				size="icon"
				onClick={() => updateMessageFeedback(index, 'down')}
				className="h-6 w-6 p-1 hover:bg-hotpink-300"
			>
				<ThumbsDown
					className={`h-4 w-4 ${feedback === 'down' ? 'fill-black text-black' : 'text-black'}`}
				/>
			</Button>
		</div>
	)
}
===== src/app/ai-chat-assistant/components/message-list.tsx =====
import { useEffect, useRef } from 'react'
import MarkdownWithCode from '@/components/markdown-with-code'
import { Message, useChatStore } from '@/store/chat-store'
import { ChatCopyButton } from './chat-copy-button'
import { ChatFeedback } from './chat-feedback'

interface MessageListProps {
	isTyping: boolean
}

export function MessageList({ isTyping }: MessageListProps) {
	const { messages } = useChatStore()
	const bottomRef = useRef<HTMLDivElement>(null)

	useEffect(() => {
		bottomRef.current?.scrollIntoView({ behavior: 'smooth' })
	}, [messages])

	return (
		<div id="chat_bubbles" className="space-y-3">
			{messages.map((msg, idx) => (
				<div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
					<div
						className={`animate-fade-in relative max-w-[80%] rounded-xl px-4 py-2 text-sm text-black transition-all duration-200 ease-in-out ${
							msg.role === 'user'
								? 'border border-solid border-zinc-300 bg-cblue-300'
								: 'bg-sage-200'
						}`}
					>
						<p className="mb-1 text-xs text-muted-foreground">
							{msg.role === 'user' ? 'You' : 'AI'} ¬∑ {new Date(msg.createdAt).toLocaleTimeString()}
						</p>

						<div className="whitespace-normal [&>*]:mb-1 [&>*]:mt-1">
							<MarkdownWithCode markdown={msg.text} />
						</div>

						{msg.role === 'assistant' && (
							<div className="mt-3 flex items-center space-x-2">
								<ChatCopyButton text={msg.text} />
								<ChatFeedback index={idx} />
							</div>
						)}
					</div>
				</div>
			))}
			{isTyping && <div className="text-sm italic text-muted-foreground">AI is typing‚Ä¶</div>}
			<div ref={bottomRef} />
		</div>
	)
}
===== src/app/ai-chat-assistant/components/chat-input-form.tsx =====
import React, { useRef, useState } from 'react'
import { useChatStore } from '@/store/chat-store'
import { Button, Checkbox, Textarea } from '@flavioespinoza/salsa-ui'
import { getAiReply } from '../actions'

interface ChatInputFormProps {
	isTyping: boolean
	setIsTyping: React.Dispatch<React.SetStateAction<boolean>>
	addMessage: (message: { role: 'user' | 'assistant'; text: string; createdAt: string }) => void
}

export function ChatInputForm({ isTyping, setIsTyping, addMessage }: ChatInputFormProps) {
	const { messages, clearMessages } = useChatStore()
	const [input, setInput] = useState('')
	const [sendOnEnterOnly, setSendOnEnterOnly] = useState(true)
	const inputRef = useRef<HTMLTextAreaElement>(null)

	const handleSubmitAction = async (e: React.FormEvent) => {
		e.preventDefault()
		const text = input.trim()
		if (!text || isTyping) return

		setIsTyping(true)
		setInput('')
		const userMessage = { role: 'user' as const, text, createdAt: new Date().toISOString() }
		addMessage(userMessage)

		const messagesForApi = [
			...messages.map((m) => ({ role: m.role, content: m.text })),
			{ role: userMessage.role, content: userMessage.text }
		]

		try {
			const result = await getAiReply(messagesForApi)

			if (result.success) {
				addMessage({
					role: 'assistant',
					text: result.reply,
					createdAt: new Date().toISOString()
				})
			} else {
				addMessage({
					role: 'assistant',
					text: `Error: ${result.error}`,
					createdAt: new Date().toISOString()
				})
			}
		} catch (error) {
			console.error('Failed to get AI reply:', error)
			addMessage({
				role: 'assistant',
				text: 'Sorry, there was an error processing your request.',
				createdAt: new Date().toISOString()
			})
		} finally {
			setIsTyping(false)
		}
	}

	const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
		if (sendOnEnterOnly) {
			if (e.key === 'Enter' && !e.shiftKey) {
				e.preventDefault()
				handleSubmitAction(e as unknown as React.FormEvent)
			}
		} else {
			if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
				e.preventDefault()
				handleSubmitAction(e as unknown as React.FormEvent)
			}
		}
	}

	const ButtonSend = () => (
		<>
			<Checkbox
				id="sendOnEnter"
				className={`mr-1 mt-3 bg-hotpink-200 ${sendOnEnterOnly ? 'bg-hotpink-400' : 'bg-sage-200'} text-white`}
				checked={sendOnEnterOnly}
				onCheckedChange={() => setSendOnEnterOnly(!sendOnEnterOnly)}
			/>
			<label className="mr-2 mt-2 text-xs" htmlFor="sendOnEnter">
				{' '}
				Send w/ Enter
			</label>
			<Button type="submit" variant="default" disabled={isTyping || !input.trim()}>
				Send Message
			</Button>
		</>
	)

	return (
		<form onSubmit={handleSubmitAction} className="w-full max-w-[calc(640px+2rem)] px-4">
			<div className="space-y-3 rounded-xl border border-zinc-100 bg-white p-4 shadow-xl">
				<Textarea
					ref={inputRef}
					value={input}
					onChange={(e) => setInput(e.target.value)}
					onKeyDown={handleKeyDown}
					placeholder="Ask anything"
					rows={2}
					className="resize-y border border-solid border-zinc-300 bg-cblue-300 text-black"
					disabled={isTyping}
				/>
				<div className="flex items-center justify-between">
					{' '}
					<Button
						variant="outline"
						type="button"
						onClick={clearMessages}
						className="hover:bg-cblue-500/60"
					>
						New Chat
					</Button>
					<div className="flex items-center gap-2">
						{' '}
						<ButtonSend />
					</div>
				</div>
			</div>
		</form>
	)
}
===== src/app/ai-chat-assistant/actions.ts =====
'use server'

import { z } from 'zod'

const messageSchema = z.object({
	role: z.enum(['user', 'assistant', 'system']),
	content: z.string()
})

const getReplySchema = z.array(messageSchema)

type ActionResult = { success: true; reply: string } | { success: false; error: string }

export async function getAiReply(messages: z.infer<typeof getReplySchema>): Promise<ActionResult> {
	const validationResult = getReplySchema.safeParse(messages)
	if (!validationResult.success) {
		console.error('Invalid input format:', validationResult.error)
		return { success: false, error: 'Invalid message format.' }
	}

	const apiKey = process.env.OPENAI_API_KEY
	if (!apiKey) {
		console.error('OpenAI API key is not configured.')
		return { success: false, error: 'Server configuration error.' }
	}

	try {
		const res = await fetch('https://api.openai.com/v1/chat/completions', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Authorization: `Bearer ${apiKey}`
			},
			body: JSON.stringify({
				model: 'gpt-4o-2024-05-13',
				messages: validationResult.data,
				temperature: 0.7
			})
		})

		if (!res.ok) {
			const errorText = await res.text()
			console.error(`OpenAI API error (${res.status}):`, errorText)
			return { success: false, error: `OpenAI API request failed (Status: ${res.status})` }
		}

		const json = await res.json()
		const reply = json.choices?.[0]?.message?.content

		if (!reply) {
			console.error('No reply content found in OpenAI response:', json)
			return { success: false, error: 'Action error: Sorry, something went wrong receiving the reply.' }
		}

		return { success: true, reply }
	} catch (err: unknown) {
		console.error('Chat action error:', err)
		const errorMessage = err instanceof Error ? err.message : 'Action error: An unexpected server error occurred.'
		return { success: false, error: `Server error: ${errorMessage}` }
	}
}
===== src/app/ai-chat-assistant/page.tsx =====
'use client'

import { useState } from 'react'
import { useChatStore } from '@/store/chat-store'
import { ChatInputForm } from './components/chat-input-form'
import { MessageList } from './components/message-list'

export default function ChatPage() {
	const { messages, addMessage } = useChatStore()
	const [isTyping, setIsTyping] = useState(false)

	const isEmpty = messages.length === 0

	return (
		<main
			className={`relative mx-auto flex max-w-xl flex-col px-4 pt-4 ${
				isEmpty ? 'min-h-[calc(100vh-150px)] items-center justify-center' : 'pb-[120px]'
			}`}
		>
			{isEmpty ? (
				<div className="mb-6 text-center text-lg text-zinc-500">How can I help you today?</div>
			) : (
				<MessageList isTyping={isTyping} />
			)}

			{isEmpty ? (
				<ChatInputForm isTyping={isTyping} setIsTyping={setIsTyping} addMessage={addMessage} />
			) : (
				<div className="fixed bottom-4 left-1/2 w-full -translate-x-1/2 transform sm:bottom-8">
					<div className="mx-auto flex justify-center">
						<ChatInputForm isTyping={isTyping} setIsTyping={setIsTyping} addMessage={addMessage} />
					</div>
				</div>
			)}
		</main>
	)
}
===== src/components/ui/tabs.tsx =====
'use client'

import React from 'react'
import * as TabsPrimitive from '@radix-ui/react-tabs'
import { cn } from '@/lib/utils'

export const Tabs = TabsPrimitive.Root

export const TabsList = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.List>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.List
		ref={ref}
		className={cn(
			'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',
			className
		)}
		{...props}
	/>
))
TabsList.displayName = TabsPrimitive.List.displayName

export const TabsTrigger = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.Trigger>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.Trigger
		ref={ref}
		className={cn(
			'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all hover:text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground',
			className
		)}
		{...props}
	/>
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

export const TabsContent = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.Content
		ref={ref}
		className={cn('mt-2 rounded-md border p-6', className)}
		{...props}
	/>
))
TabsContent.displayName = TabsPrimitive.Content.displayName
===== src/components/ui/alert.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'
import { AlertTriangle, CheckCircle2, Info } from 'lucide-react'

export type AlertType = 'info' | 'success' | 'warning' | 'error'

const iconMap = {
	info: Info,
	success: CheckCircle2,
	warning: AlertTriangle,
	error: AlertTriangle
}

export function Alert({
	title,
	message,
	type = 'info',
	className
}: {
	title?: string
	message: string
	type?: AlertType
	className?: string
}) {
	const Icon = iconMap[type]
	return (
		<div className={cn('flex items-start gap-3 rounded-md border px-4 py-3 text-sm', className)}>
			<Icon className="mt-0.5 h-5 w-5 text-muted-foreground" />
			<div>
				{title && <div className="font-medium">{title}</div>}
				<div>{message}</div>
			</div>
		</div>
	)
}
===== src/components/ui/dialog.tsx =====
'use client'

import * as DialogPrimitive from '@radix-ui/react-dialog'
import { cn } from '@/lib/utils'
import { X } from 'lucide-react'

export const Dialog = DialogPrimitive.Root
export const DialogTrigger = DialogPrimitive.Trigger

export function DialogContent({
	title,
	description,
	children
}: {
	title: string
	description?: string
	children?: React.ReactNode
}) {
	return (
		<DialogPrimitive.Portal>
			<DialogPrimitive.Overlay className="fixed inset-0 z-40 bg-black/40 backdrop-blur-sm" />
			<DialogPrimitive.Content className="fixed left-1/2 top-1/2 z-50 w-full max-w-lg -translate-x-1/2 -translate-y-1/2 rounded-lg bg-background p-6 shadow-lg outline-none">
				<div className="mb-4 flex items-center justify-between">
					<h2 className="text-lg font-semibold">{title}</h2>
					<DialogPrimitive.Close className="text-muted-foreground hover:text-foreground">
						<X className="h-4 w-4" />
					</DialogPrimitive.Close>
				</div>
				{description && <p className="mb-2 text-sm text-muted-foreground">{description}</p>}
				<div>{children}</div>
			</DialogPrimitive.Content>
		</DialogPrimitive.Portal>
	)
}
===== src/components/ui/select.tsx =====
'use client'

import * as React from 'react'
import { cn } from '@/lib/utils'
import {
	Select as RadixSelect,
	SelectContent,
	SelectGroup,
	SelectItem,
	SelectLabel,
	SelectTrigger,
	SelectValue
} from '@radix-ui/react-select'

interface SelectProps {
	value: string
	onValueChange: (value: string) => void
	options: { label: string; value: string }[]
	placeholder?: string
	className?: string
}

export function Select({ value, onValueChange, options, placeholder, className }: SelectProps) {
	return (
		<RadixSelect value={value} onValueChange={onValueChange}>
			<SelectTrigger className={cn('h-10 w-full rounded border px-3 py-2 text-sm', className)}>
				<SelectValue placeholder={placeholder || 'Select'} />
			</SelectTrigger>
			<SelectContent>
				<SelectGroup>
					<SelectLabel>{placeholder}</SelectLabel>
					{options.map((opt) => (
						<SelectItem key={opt.value} value={opt.value}>
							{opt.label}
						</SelectItem>
					))}
				</SelectGroup>
			</SelectContent>
		</RadixSelect>
	)
}
===== src/components/layout/navbar.tsx =====
'use client'

import { useEffect, useState } from 'react'
import Link from 'next/link'
import { cn } from '@/lib/utils'

const links = [
	{ href: '/', label: 'Home' },
	{ href: '/ai-chat-assistant', label: 'AI Chat Assistant' },
	{ href: '/ai-llm-data-visualizer', label: 'AI LLM Data Visualizer' },
	{ href: '/commits', label: 'Commits' },
	{ href: '/contact', label: 'Contact' }
]

export function Navbar() {
	const [isScrolled, setIsScrolled] = useState(false)

	useEffect(() => {
		const onScroll = () => setIsScrolled(window.scrollY > 10)
		window.addEventListener('scroll', onScroll)
		return () => window.removeEventListener('scroll', onScroll)
	}, [])

	return (
		<header
			className={cn(
				'supports-[backdrop-filter]:bg-background/80 sticky top-0 z-50 w-full backdrop-blur transition-all',
				isScrolled && 'border-b border-black/10 shadow-sm'
			)}
		>
			<div className="mx-auto flex max-w-6xl items-center justify-between px-6 py-3">
				<div className="flex gap-4 text-sm font-medium">
					{links.map(({ href, label }) => (
						<Link key={href} href={href} className="transition-colors hover:text-primary">
							{label}
						</Link>
					))}
				</div>
			</div>
		</header>
	)
}
===== src/components/layout/container.tsx =====
import { cn } from '@/lib/utils'

export function Container({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <div className={cn('mx-auto max-w-5xl px-6', className)} {...props} />
}
===== src/components/layout/section.tsx =====
import { cn } from '@/lib/utils'

export function Section({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <section className={cn('space-y-6 py-12', className)} {...props} />
}
===== src/components/layout/footer.tsx =====
export function Footer() {
	return (
		<footer className="w-full border-t px-6 py-4 text-center text-sm text-muted-foreground">
			Built by Flavio Espinoza ‚Äî ¬© {new Date().getFullYear()}
		</footer>
	)
}
===== src/components/providers/theme-provider.tsx =====
'use client'

import { ThemeProvider } from 'next-themes'

export function AppThemeProvider({ children }: { children: React.ReactNode }) {
	return (
		<ThemeProvider attribute="class" defaultTheme="system" enableSystem>
			{children}
		</ThemeProvider>
	)
}
===== src/components/markdown-with-code.tsx =====
'use client'

import React, { useState } from 'react'
import ReactMarkdown from 'react-markdown'
import { Prism as SyntaxHighlighterBase } from 'react-syntax-highlighter'
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'
import { Button } from '@flavioespinoza/salsa-ui'
import { Check, Copy } from 'lucide-react'

interface MarkdownWithCodeProps {
	markdown: string
}

const MarkdownWithCode: React.FC<MarkdownWithCodeProps> = ({ markdown }) => {
	const CodeBlock = ({ node, inline, className, children, ...props }: any): JSX.Element => {
		const match = /language-(\w+)/.exec(className || '')
		const language = match ? match[1] : null
		const [copied, setCopied] = useState(false)

		const handleCopy = () => {
			navigator.clipboard.writeText(String(children)).then(() => {
				setCopied(true)
				setTimeout(() => setCopied(false), 4000)
			})
		}

		const SyntaxHighlighter = SyntaxHighlighterBase as unknown as React.ComponentType<any>

		if (!inline && language) {
			return (
				<div className="overflow-hidden rounded-md border border-zinc-200">
					<div className="flex items-center justify-between bg-sage-600 px-3 font-mono text-[10px] text-white">
						<span>{language}</span>
						<Button variant="static" size="sm" className="p-0" onClick={handleCopy}>
							{copied ? (
								<div className="flex">
									<Check className="h-3.5 w-3 text-white" />
									<div className="ml-1 text-[10px] text-white">Copied</div>
								</div>
							) : (
								<div className="flex">
									<Copy className="h-3.5 w-3 text-white" />
									<div className="ml-1 text-[10px] text-white">Copy</div>
								</div>
							)}
						</Button>
					</div>
					<SyntaxHighlighter
						style={vscDarkPlus}
						language={language}
						PreTag="div"
						customStyle={{
							margin: 0,
							padding: '1rem',
							fontSize: '0.875rem'
						}}
						{...props}
					>
						{String(children).replace(/\n$/, '')}
					</SyntaxHighlighter>
				</div>
			)
		}

		return (
			<code className={className} {...props}>
				{children}
			</code>
		)
	}

	return (
		<ReactMarkdown
			components={{
				code: CodeBlock
			}}
		>
			{markdown}
		</ReactMarkdown>
	)
}

export default MarkdownWithCode
===== src/hooks/use-copy-to-clipboard.ts =====
import { useCallback, useState } from 'react'

type CopiedValue = string | null
type CopyFn = (text: string) => Promise<boolean>

function useCopyToClipboard(): [CopiedValue, CopyFn] {
	const [copiedText, setCopiedText] = useState<CopiedValue>(null)

	const copy: CopyFn = useCallback(async (text) => {
		if (!navigator?.clipboard) {
			console.warn('Clipboard API not supported')
			return false
		}

		try {
			await navigator.clipboard.writeText(text)
			setCopiedText(text)
			return true
		} catch (error) {
			console.error('Failed to copy:', error)
			setCopiedText(null)
			return false
		}
	}, [])

	return [copiedText, copy]
}

export default useCopyToClipboard
===== src/lib/utils.ts =====
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs))
}
===== src/documents/Flavio_Espinoza_Resume_2025.md =====
# Flavio Espinoza

**Senior Frontend Developer**  
Salt Lake City, UT ¬∑ flavio.espinoza@gmail.com ¬∑ [github.com/flavioespinoza](https://github.com/flavioespinoza)

---

## Summary

Experienced full-stack developer with 11+ years building performant, accessible, and visually polished user interfaces.  
Recent focus on AI-integrated applications, LLM tooling, and data visualization using modern React, TypeScript, and Next.js frameworks.

---

## Skills

- **Languages & Frameworks:** TypeScript, React, Next.js, JavaScript (ES6+), Tailwind CSS, HTML, CSS
- **Libraries & Tools:** Zustand, Zod, Chart.js, D3.js, PapaParse, Lucide React, OpenAI API, next-themes
- **DevOps & Platform:** Vercel, Git, REST APIs, Node.js
- **AI Integration:** GPT-4o, LLM prompt engineering, dynamic data extraction, Resend (planned)

---

## Recent Work Experience

### Bless Network ¬∑ Senior Frontend Engineer

**May 2024 ‚Äì Present**

- Built a modular portfolio and projects showcase with AI-powered data pipelines
- Implemented dynamic theme switching using next-themes and Tailwind CSS
- Exposed GitHub commit history via dynamic `/api/commits` and CSV/JSON export
- Created responsive charts via D3.js from OpenAI-generated structured data
- Configured Open Graph meta tags, Twitter card preview, and custom favicon
- Developed `/contact` page and prepared API integrations for Formspree and Resend

---

## Portfolio Projects

### AI Chat Assistant

- React + TypeScript interface for prompt + response with GPT-4o
- Uses Zustand for message state and theme toggling via next-themes
- Error boundaries, loading states, and minimal UI

### LLM Data Visualizer

- Parses human language prompts using OpenAI and renders interactive bar/line/pie charts via D3.js
- Supports dark mode, CSV export, iframe embedding, and data cleaning logic
- Responsive chart rendering and grouped analytics via Day.js

---

## Awards & Recognition

- First Place ‚Äì SECCA International Design Competition (MIT Press Publication)
- Environ Design 8 Speaker | Scope-Hamptons Artist | Published with MIT Press

---

## Education

**Master of Architecture** ‚Äì University of Utah, 2000
===== src/documents/flavio_espinoza_resume_schema.json =====
{
	"@context": "https://schema.org",
	"@type": "Person",
	"name": "Flavio Espinoza",
	"email": "mailto:flavio.espinoza@gmail.com",
	"url": "https://my-portfolio.vercel.app",
	"sameAs": ["https://github.com/flavioespinoza", "https://linkedin.com/in/flavioespinoza"],
	"jobTitle": "Senior Frontend Developer",
	"address": {
		"@type": "PostalAddress",
		"addressLocality": "Salt Lake City",
		"addressRegion": "UT",
		"addressCountry": "US"
	},
	"alumniOf": {
		"@type": "EducationalOrganization",
		"name": "University of Utah"
	},
	"worksFor": {
		"@type": "Organization",
		"name": "Bless Network"
	},
	"hasOccupation": {
		"@type": "Occupation",
		"name": "Frontend Engineer",
		"skills": [
			"React",
			"Next.js",
			"TypeScript",
			"Tailwind CSS",
			"D3.js",
			"OpenAI API",
			"Zustand",
			"Zod",
			"Vercel"
		]
	},
	"description": "Senior full-stack engineer with 11+ years of experience delivering responsive, performant, and accessible UI with React, TypeScript, and modern frameworks. Recent focus on LLM-powered applications using GPT-4o and D3.js for real-time visualization."
}
===== src/store/chat-store.ts =====
import { create } from 'zustand'
import { persist } from 'zustand/middleware'

export type Message = {
	role: 'user' | 'assistant'
	text: string
	createdAt: string
	feedback?: 'up' | 'down'
}

interface ChatState {
	messages: Message[]
	addMessage: (message: Message) => void
	setMessages: (messages: Message[]) => void
	clearMessages: () => void
	updateMessageFeedback: (index: number, feedback: 'up' | 'down') => void
}

export const useChatStore = create<ChatState>()(
	persist(
		(set) => ({
			messages: [],
			addMessage: (message) =>
				set((state) => ({
					messages: [...state.messages, message]
				})),
			setMessages: (messages) => set({ messages }),
			clearMessages: () => set({ messages: [] }),
			updateMessageFeedback: (index, feedback) =>
				set((state) => {
					const updatedMessages = state.messages.map((msg, i) => {
						if (i === index) {
							return { ...msg, feedback }
						}
						return msg
					})
					return { messages: updatedMessages }
				})
		}),
		{
			name: 'chat-messages'
		}
	)
)
