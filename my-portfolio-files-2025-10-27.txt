===== src/app/commits/page.tsx =====
'use client'

import { useCallback, useEffect, useState } from 'react'
import { MorphingChart } from '@flavioespinoza/salsa-ui'
import Papa from 'papaparse'

interface CommitData {
	project: string
	branch: string
	date: string
	author: string
	message: string
}

interface Commit {
	project: string
	branch: string
	date: string
	author: string
	message: string
}

function highlight(text: string, keyword: string) {
	if (!keyword) return text
	const regex = new RegExp(`(${keyword})`, 'gi')
	return text.replace(regex, '<mark>$1</mark>')
}

export default function CommitsPage() {
	const [filtered, setFiltered] = useState<Commit[]>([])
	const [csvUrl, setCsvUrl] = useState('')
	const [search, setSearch] = useState('')
	const [groupBy, setGroupBy] = useState<'day' | 'month' | 'week' | 'year'>('day')
	const [projectFilter, setProjectFilter] = useState('all')

	// Define getFiltered without filtered in dependencies
	const getFiltered = useCallback(
		(filteredCommits: CommitData[]): Commit[] => {
			console.log('getFiltered called')
			setFiltered(filteredCommits)
			return filteredCommits
		},
		[search, projectFilter]
	)

	// Generate CSV URL when filtered commits change
	useEffect(() => {
		const csv = Papa.unparse(
			filtered.map(({ project, branch, date, author, message }) => ({
				project,
				branch,
				date,
				author,
				message
			}))
		)
		const blob = new Blob([csv], { type: 'text/csv' })
		const newUrl = URL.createObjectURL(blob)
		setCsvUrl(newUrl)

		// Cleanup previous URL
		return () => {
			URL.revokeObjectURL(newUrl)
		}
	}, [filtered])

	return (
		<main className="mx-auto max-w-6xl space-y-6 p-6">
			<h1 className="text-3xl font-bold">GitHub Contributions</h1>

			<div className="mb-2 flex flex-wrap justify-end gap-4 text-right text-sm">
				<div>
					<label className="mr-2">Project</label>
					<select
						value={projectFilter}
						onChange={(e) => {
							const val = e.target.value
							setProjectFilter(val)
							const url = new URL(window.location.href)
							url.searchParams.set('project', val)
							window.history.replaceState(null, '', url.toString())
						}}
						className="rounded border p-1 text-sm"
					>
						<option value="all">All</option>
						{[...new Set(filtered.map((c) => c.project))].sort().map((p) => (
							<option key={p} value={p}>
								{p}
							</option>
						))}
					</select>
				</div>

				<div>
					<label className="mr-2">Group by</label>
					<select
						value={groupBy}
						onChange={(e) => {
							const val = e.target.value as 'day' | 'month' | 'week' | 'year'
							setGroupBy(val)
							const url = new URL(window.location.href)
							url.searchParams.set('groupBy', val)
							window.history.replaceState(null, '', url.toString())
						}}
						className="rounded border p-1 text-sm"
					>
						<option value="day">Day</option>
						<option value="month">Month</option>
						<option value="week">Week</option>
						<option value="year">Year</option>
					</select>
				</div>
			</div>

			<input
				type="text"
				placeholder="Search commits..."
				value={search}
				onChange={(e) => {
					const val = e.target.value
					setSearch(val)
					const url = new URL(window.location.href)
					url.searchParams.set('search', val)
					window.history.replaceState(null, '', url.toString())
				}}
				className="mb-4 w-full rounded border border-muted p-2 text-sm"
			/>
			<div className="my-6">
				<MorphingChart {...{ projectFilter, search, groupBy, getFiltered }} />
			</div>

			{csvUrl && (
				<a
					href={csvUrl}
					download="filtered-commits.csv"
					className="mt-2 block text-sm text-cblue-500 underline"
				>
					Export Filtered Results as CSV
				</a>
			)}

			<a
				href="/api/commits"
				target="_blank"
				rel="noopener noreferrer"
				className="mt-4 block text-sm text-cblue-500 underline"
			>
				View or download all-commits.json
			</a>

			<table className="w-full table-auto overflow-hidden rounded-lg border border-border text-sm shadow-sm">
				<thead>
					<tr className="bg-muted text-xs font-semibold uppercase tracking-wide text-muted-foreground">
						<th className="px-3 py-2 text-left">Date</th>
						<th className="px-3 py-2 text-left">Project</th>
						<th className="px-3 py-2 text-left">Branch</th>
						<th className="px-3 py-2 text-left">Author</th>
						<th className="px-3 py-2 text-left">Message</th>
					</tr>
				</thead>
				<tbody className="divide-y divide-border">
					{filtered.map((commit, i) => (
						<tr key={i} className="border-b">
							<td className="px-3 py-2">{commit.date}</td>
							<td className="px-3 py-2">{commit.project}</td>
							<td className="px-3 py-2">{commit.branch}</td>
							<td className="px-3 py-2">{commit.author}</td>
							<td
								className="whitespace-pre-wrap px-3 py-2"
								dangerouslySetInnerHTML={{ __html: highlight(commit.message, search) }}
							/>
						</tr>
					))}
				</tbody>
			</table>
		</main>
	)
}
===== src/app/contact/actions.ts =====
'use server'

import { z } from 'zod'

const contactFormSchema = z.object({
	email: z.string().email({ message: 'Invalid email address.' }),
	message: z.string().min(5, { message: 'Message must be at least 5 characters long.' }),
	website: z.string().optional()
})

type FormActionResult = { success: true; message: string } | { success: false; error: string }

export async function submitContactForm(formData: FormData): Promise<FormActionResult> {
	const parsed = contactFormSchema.safeParse({
		email: formData.get('email'),
		message: formData.get('message'),
		website: formData.get('website')
	})

	if (!parsed.success) {
		const errorMessages = parsed.error.errors
			.map((e) => `${e.path.join('.')}: ${e.message}`)
			.join(', ')
		return { success: false, error: `Invalid form data: ${errorMessages}` }
	}

	if (parsed.data.website) {
		console.log('Bot submission detected (server-side).')
		return { success: false, error: 'There was an issue submitting the form.' }
	}

	const formspreeEndpoint = process.env.FORMSPREE_ENDPOINT

	if (!formspreeEndpoint) {
		console.error('Formspree endpoint is not configured.')
		return { success: false, error: 'Server configuration error.' }
	}

	try {
		const res = await fetch(formspreeEndpoint, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Accept: 'application/json'
			},
			body: JSON.stringify({ email: parsed.data.email, message: parsed.data.message })
		})

		if (res.ok) {
			return { success: true, message: 'Message sent successfully!' }
		} else {
			const errorData = await res.json().catch(() => ({}))
			console.error(`Formspree submission failed (${res.status}):`, errorData)
			return {
				success: false,
				error: `Failed to send message (Status: ${res.status}). Please try again.`
			}
		}
	} catch (err) {
		console.error('Error submitting to Formspree:', err)
		return { success: false, error: 'An unexpected error occurred while sending the message.' }
	}
}
===== src/app/contact/page.tsx =====
'use client'

import { useRef, useState, useTransition } from 'react'
import { Button, Input, Textarea } from '@flavioespinoza/salsa-ui'
import { submitContactForm } from './actions'

export default function ContactPage() {
	const [formStatus, setFormStatus] = useState<{
		status: 'idle' | 'success' | 'error'
		message: string | null
	}>({ status: 'idle', message: null })
	const [isPending, startTransition] = useTransition()
	const formRef = useRef<HTMLFormElement>(null)
	const CALENDLY_URL = 'https://calendly.com/flavio-espinoza/chat-with-flavio'

	const handleFormSubmit = async (formData: FormData) => {
		setFormStatus({ status: 'idle', message: null })

		startTransition(async () => {
			const result = await submitContactForm(formData)

			if (result.success) {
				setFormStatus({ status: 'success', message: result.message })
				formRef.current?.reset()
			} else {
				setFormStatus({ status: 'error', message: result.error })
			}
		})
	}

	const testBotSubmission = () => {
		const form = document.querySelector('form')
		if (!form) {
			console.error('❌ Form not found')
			return
		}

		const inputs = form.querySelectorAll('input, textarea')
		inputs.forEach((input) => {
			;(input as HTMLInputElement).value = 'bot test value'
			console.log(`✏️ Filled ${input.getAttribute('name') || 'unnamed field'} with test value`)
		})

		const submitEvent = new Event('submit', { bubbles: true, cancelable: true })
		form.dispatchEvent(submitEvent)
	}

	if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
		;(window as any).testBotSubmission = testBotSubmission
	}

	return (
		<main className="mx-auto max-w-2xl space-y-8 p-6 text-white">
			<h1 className="text-3xl font-bold">Let's have a chat</h1>

			<div className="space-y-2">
				<h2 className="text-1xl">Schedule a time for us to talk.</h2>
				<iframe
					src={CALENDLY_URL}
					height="900"
					className="w-full max-w-full rounded border"
				></iframe>
			</div>
		</main>
	)
}
===== src/app/about/page.tsx =====
export default function AboutPage() {
	return (
		<main className="mx-auto max-w-3xl space-y-8 px-6 py-12">
			<h1 className="text-4xl font-bold tracking-tight text-foreground">About Me</h1>

			<section className="space-y-4 text-base leading-relaxed text-muted-foreground">
				<p>
					Creative and technically versatile developer with 11+ years of experience building
					high-impact, production-grade applications using React.js, Node.js, and TypeScript. Proven
					ability to ship full-stack features end-to-end—from idea to production—across Web3,
					FinTech, and AI-first platforms. Adept at collaborating directly with founders and product
					leaders in fast-paced startup environments. Strong background in real-time data systems,
					D3.js visualization, and OpenAI integration for AI-augmented development.
				</p>
			</section>
		</main>
	)
}
===== src/app/ai-llm-data-visualizer/page.tsx =====
'use client'

export default function ProjectsPage() {
	return (
		<main className="mx-auto max-w-6xl space-y-10 px-6 py-12">
			<iframe
				loading="lazy"
				src="https://ai-llm-data-visualizer-git-main-flavio-espinozas-projects.vercel.app"
				width="100%"
				height="1000"
				className="w-full rounded-md border shadow-sm"
			/>
		</main>
	)
}
===== src/app/fluid/page.tsx =====
'use client'

import * as React from 'react'
import { Button } from '@flavioespinoza/salsa-ui'

export default function FluidPage() {
	return (
		<div className="flex min-h-screen flex-col items-center justify-center p-6">
			<div className="max-w-2xl space-y-8 text-center">
				<h2 className="text-xl font-semibold">These are just experiments using fluid CSS</h2>
				<p>Resize the browser window and see the fluid transitions of the elements below.</p>
				<h1 className="~md/lg:~text-base/4xl">Quick increase</h1>
				<Button onClick={() => alert('Clicked!')}>Fluid Button</Button>
			</div>
		</div>
	)
}
===== src/app/ai-multi-agent/components/agent-card.tsx =====
import { Card } from '@flavioespinoza/salsa-ui'
import { CheckCircle, FileText, Loader2, Search } from 'lucide-react'

interface AgentCardProps {
	name: string
	role: string
	color: string
	icon: 'search' | 'file-text' | 'check-circle'
	isActive: boolean
}

const iconMap = {
	search: Search,
	'file-text': FileText,
	'check-circle': CheckCircle
}

export default function AgentCard({ name, role, color, icon, isActive }: AgentCardProps) {
	const Icon = iconMap[icon]

	return (
		<Card title={name} description={role}>
			<div className={`${color} -mt-4 mb-4 flex h-12 w-12 items-center justify-center rounded-lg`}>
				<Icon className={`h-6 w-6 text-white`} />
			</div>
			{isActive && (
				<div className="mt-4 flex items-center gap-2 text-black">
					<Loader2 className="h-4 w-4 animate-spin" />
					<span className="text-sm">Working...</span>
				</div>
			)}
		</Card>
	)
}
===== src/app/ai-multi-agent/components/results-display.tsx =====
import MarkdownWithCode from '@/components/markdown-with-code'
import { Card } from '@flavioespinoza/salsa-ui'
import { CheckCircle, FileText, Search } from 'lucide-react'

interface ResultsDisplayProps {
	results: {
		research: string
		content: string
		review: string
	}
}

export default function ResultsDisplay({ results }: ResultsDisplayProps) {
	return (
		<div className="space-y-4">
			{/* Research Results */}
			<Card className="p-6">
				<div className="mb-4 flex items-center gap-3">
					<div className="flex h-10 w-10 items-center justify-center rounded-lg bg-cblue-500">
						<Search className="h-5 w-5 text-white" />
					</div>
					<h2 className="text-2xl font-semibold">Research Findings</h2>
				</div>
				<div className="whitespace-pre-wrap [&>*]:mb-1 [&>*]:mt-1">
					<MarkdownWithCode markdown={results.research} />
				</div>
			</Card>

			{/* Content Results */}
			<Card className="p-6">
				<div className="mb-4 flex items-center gap-3">
					<div className="flex h-10 w-10 items-center justify-center rounded-lg bg-hotpink-500">
						<FileText className="h-5 w-5 text-white" />
					</div>
					<h2 className="text-2xl font-semibold">Generated Content</h2>
				</div>
				<div className="whitespace-pre-wrap [&>*]:mb-1 [&>*]:mt-1">
					<MarkdownWithCode markdown={results.content} />
				</div>
			</Card>

			{/* Review Results */}
			<Card className="p-6">
				<div className="mb-4 flex items-center gap-3">
					<div className="flex h-10 w-10 items-center justify-center rounded-lg bg-purple-500">
						<CheckCircle className="h-5 w-5 text-white" />
					</div>
					<h2 className="text-2xl font-semibold">Review & Feedback</h2>
				</div>
				<div className="whitespace-pre-wrap [&>*]:mb-1 [&>*]:mt-1">
					<MarkdownWithCode markdown={results.review} />
				</div>
			</Card>
		</div>
	)
}
===== src/app/ai-multi-agent/components/research-form.tsx =====
import { useState } from 'react'
import { Button, Input } from '@flavioespinoza/salsa-ui'
import { Loader2 } from 'lucide-react'

interface ResearchFormProps {
	onSubmit: (topic: string) => void
	loading: boolean
	error: string | null
}

export default function ResearchForm({ onSubmit, loading, error }: ResearchFormProps) {
	const [topic, setTopic] = useState('')

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault()
		if (topic.trim()) {
			onSubmit(topic)
		}
	}

	return (
		<div className="mb-8 rounded-xl bg-white p-6 text-black backdrop-blur-sm">
			<label className="mb-2 block text-sm font-medium">Research Topic</label>
			<form onSubmit={handleSubmit} className="flex gap-4">
				<Input
					type="text"
					value={topic}
					onChange={(e) => setTopic(e.target.value)}
					placeholder="Enter a topic to research (e.g., 'Artificial Intelligence in Healthcare')"
					className="border border-solid border-zinc-300 bg-cblue-200 text-black"
					disabled={loading}
				/>
				<Button variant="default" type="submit" disabled={loading || !topic.trim()}>
					{loading ? (
						<>
							<Loader2 className="h-5 w-5 animate-spin" />
							Processing
						</>
					) : (
						'Start Research'
					)}
				</Button>
			</form>
			{error && <p className="mt-2 text-sm text-red-400">{error}</p>}
		</div>
	)
}
===== src/app/ai-multi-agent/page.tsx =====
'use client'

import { useState } from 'react'
import { Loader2, Users } from 'lucide-react'
import AgentCard from './components/agent-card'
import ResearchForm from './components/research-form'
import ResultsDisplay from './components/results-display'

export default function MultiAgentPage() {
	const [topic, setTopic] = useState('')
	const [loading, setLoading] = useState(false)
	const [results, setResults] = useState<any>(null)
	const [activeAgent, setActiveAgent] = useState<string | null>(null)
	const [error, setError] = useState<string | null>(null)

	const handleResearch = async (researchTopic: string) => {
		setLoading(true)
		setResults(null)
		setError(null)
		setTopic(researchTopic)

		try {
			const response = await fetch('/api/multi-agent', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ topic: researchTopic })
			})

			if (!response.ok) {
				throw new Error('Research failed')
			}

			const data = await response.json()
			setResults(data.data)
		} catch (err) {
			setError('Failed to complete research. Please try again.')
			console.error(err)
		} finally {
			setLoading(false)
			setActiveAgent(null)
		}
	}

	return (
		<div className="from-slate-900 to-slate-900 min-h-screen bg-gradient-to-br via-purple-900 p-8 text-white">
			<div className="mx-auto max-w-6xl">
				{/* Header */}
				<div className="mb-12">
					<div className="mb-4 flex items-center justify-center gap-3">
						<div className={`flex h-12 w-12 items-center justify-center rounded-lg bg-hotpink-400`}>
							<Users className={`h-6 w-6 text-white`} />
						</div>
						<h1 className="text-4xl font-bold">Multi-Agent Research System</h1>
					</div>
					<p className="mx-auto w-3/4 text-left text-white md:w-1/2">
						An autonomous multi-agent AI system where three specialized agents (Researcher, Writer,
						Reviewer) collaborate sequentially to research topics, generate content, and perform
						quality reviews—powered by CrewAI, OpenAI GPT-4o-mini, and Next.js.
					</p>
				</div>

				{/* Agent Cards */}
				<div className="mb-8 grid gap-6 md:grid-cols-3">
					<AgentCard
						name="Researcher"
						role="Gathers and analyzes information"
						color="bg-cblue-500"
						icon="search"
						isActive={activeAgent === 'researcher'}
					/>
					<AgentCard
						name="Writer"
						role="Creates structured content"
						color="bg-hotpink-400"
						icon="file-text"
						isActive={activeAgent === 'writer'}
					/>
					<AgentCard
						name="Reviewer"
						role="Reviews and provides feedback"
						color="bg-purple-500"
						icon="check-circle"
						isActive={activeAgent === 'reviewer'}
					/>
				</div>

				{/* Research Form */}
				<ResearchForm onSubmit={handleResearch} loading={loading} error={error} />

				{/* Results */}
				{results && <ResultsDisplay results={results} />}
			</div>
		</div>
	)
}
===== src/app/layout.tsx =====
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { Footer } from '@/components/layout/footer'
import { Navbar } from '@/components/layout/navbar'
import StoreProvider from '@/components/providers/store-provider'
import store from '@/redux/store'
import '@/styles/globals.css'
import '@flavioespinoza/salsa-ui/dist/index.css'

const inter = Inter({
	subsets: ['latin'],
	weight: ['300', '400', '500', '700'], // Light (300), Regular (400), Medium (500), Bold (700)
	variable: '--font-inter'
})

export const metadata: Metadata = {
	title: 'Flavio Espinoza | Portfolio',
	description:
		'Senior Frontend Engineer specializing in React, TypeScript, and AI-powered interfaces.',
	metadataBase: new URL('https://my-portfolio.vercel.app'),
	icons: {
		icon: '/favicon.ico'
	},
	openGraph: {
		title: 'Flavio Espinoza | Portfolio',
		description:
			'Senior Frontend Engineer specializing in React, TypeScript, and AI-powered interfaces.',
		type: 'website',
		locale: 'en_US',
		url: '/',
		siteName: 'Flavio Espinoza Portfolio',
		images: [
			{
				url: '/og-image.png',
				width: 1200,
				height: 630,
				alt: 'Flavio Espinoza Portfolio'
			}
		]
	},
	twitter: {
		card: 'summary_large_image',
		title: 'Flavio Espinoza | Portfolio',
		description:
			'Senior Frontend Engineer specializing in React, TypeScript, and AI-powered interfaces.',
		images: ['/og-image.png'],
		creator: '@flavioespinoza'
	}
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
	return (
		<html lang="en" className={inter.className} suppressHydrationWarning>
			<head>
				<script
					type="application/ld+json"
					dangerouslySetInnerHTML={{
						__html: JSON.stringify({
							'@context': 'https://schema.org',
							'@type': 'Person',
							name: 'Flavio Espinoza',
							email: 'mailto:flavio.espinoza@gmail.com',
							url: 'https://my-portfolio.vercel.app',
							sameAs: [
								'https://github.com/flavioespinoza',
								'https://linkedin.com/in/flavioespinoza'
							],
							jobTitle: 'Senior Frontend Developer',
							address: {
								'@type': 'PostalAddress',
								addressLocality: 'Salt Lake City',
								addressRegion: 'UT',
								addressCountry: 'US'
							},
							alumniOf: {
								'@type': 'EducationalOrganization',
								name: 'University of Utah'
							},
							worksFor: {
								'@type': 'Organization',
								name: 'Bless Network'
							},
							hasOccupation: {
								'@type': 'Occupation',
								name: 'Frontend Engineer',
								skills: [
									'React',
									'Next.js',
									'TypeScript',
									'Tailwind CSS',
									'D3.js',
									'OpenAI API',
									'Zustand',
									'Zod',
									'Vercel'
								]
							},
							description:
								'Senior full-stack engineer with 11+ years of experience delivering responsive, performant, and accessible UI with React, TypeScript, and modern frameworks. Recent focus on LLM-powered applications using GPT-4o and D3.js for real-time visualization.'
						})
					}}
				/>
			</head>
			<body className={`${inter.variable} flex min-h-screen flex-col bg-[#808a78] antialiased`}>
				<StoreProvider>
					<Navbar />
					<main className="flex-1">{children}</main>
					<Footer />
				</StoreProvider>
			</body>
		</html>
	)
}
===== src/app/wallet/page.tsx =====
import WalletConnection from '@/components/wallet-connection'

export default function WalletPage() {
	return (
		<main className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 px-4 py-12">
			<div className="mx-auto max-w-2xl">
				<div className="mb-8 text-center">
					<h1 className="text-gray-900 mb-2 text-4xl font-bold">Wallet Connection</h1>
					<p className="text-gray-600">
						Connect your MetaMask wallet to interact with the blockchain
					</p>
				</div>

				<WalletConnection />

				{/* Info Cards */}
				<div className="mt-8 grid grid-cols-1 gap-4 md:grid-cols-3">
					<div className="border-gray-200 rounded-lg border bg-white p-4 shadow-sm">
						<div className="mb-2 text-2xl">🔐</div>
						<h3 className="text-gray-900 mb-1 font-semibold">Secure</h3>
						<p className="text-gray-600 text-sm">Your keys never leave your wallet</p>
					</div>
					<div className="border-gray-200 rounded-lg border bg-white p-4 shadow-sm">
						<div className="mb-2 text-2xl">⚡</div>
						<h3 className="text-gray-900 mb-1 font-semibold">Fast</h3>
						<p className="text-gray-600 text-sm">Connect in seconds with one click</p>
					</div>
					<div className="border-gray-200 rounded-lg border bg-white p-4 shadow-sm">
						<div className="mb-2 text-2xl">🌐</div>
						<h3 className="text-gray-900 mb-1 font-semibold">Multi-chain</h3>
						<p className="text-gray-600 text-sm">Switch between networks easily</p>
					</div>
				</div>
			</div>
		</main>
	)
}
===== src/app/api/gemini/route.ts =====
import { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {}
===== src/app/api/gemini/gemini.md =====
```bash
curl "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY" \
-H 'Content-Type: application/json' \
-X POST \
-d '{
  "contents": [{
    "parts":[{"text": "Explain how AI works"}]
    }]
   }'
```
===== src/app/api/chat/route.ts =====
import { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {
	const { messages } = await req.json()

	try {
		const res = await fetch('https://api.openai.com/v1/chat/completions', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Authorization: `Bearer ${process.env.OPENAI_API_KEY}`
			},
			body: JSON.stringify({
				model: 'gpt-4o-2024-05-13',
				messages,
				temperature: 0.7
			})
		})

		if (!res.ok) {
			const error = await res.text()
			console.error('OpenAI API error:', error)
			return NextResponse.json({ error: 'OpenAI API request failed' }, { status: 500 })
		}

		const json = await res.json()
		const reply = json.choices?.[0]?.message?.content || 'Sorry, something went wrong.'
		return NextResponse.json({ reply })
	} catch (err) {
		console.error('Chat error:', err)
		return NextResponse.json({ error: 'Server error' }, { status: 500 })
	}
}
===== src/app/api/multi-agent/route.ts =====
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
	try {
		const { topic } = await request.json()

		if (!topic) {
			return NextResponse.json({ error: 'Topic is required' }, { status: 400 })
		}

		const backendUrl =
			process.env.NEXT_PUBLIC_BACKEND_URL ||
			process.env.PYTHON_BACKEND_URL ||
			'http://localhost:8000'

		console.log('Calling backend:', backendUrl)

		const response = await fetch(`${backendUrl}/research`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({ topic }),
			signal: AbortSignal.timeout(60000)
		})

		if (!response.ok) {
			const errorText = await response.text()
			console.error('Backend error:', errorText)
			throw new Error(`Research API failed: ${response.status}`)
		}

		const data = await response.json()

		return NextResponse.json({
			success: true,
			data: data
		})
	} catch (error: any) {
		console.error('Research error:', error)
		return NextResponse.json(
			{
				error: error.message || 'Failed to complete research',
				details: error.toString()
			},
			{ status: 500 }
		)
	}
}

export async function GET() {
	const backendUrl =
		process.env.NEXT_PUBLIC_BACKEND_URL || process.env.PYTHON_BACKEND_URL || 'http://localhost:8000'

	return NextResponse.json({
		message: 'Multi-Agent Research API Proxy',
		backend: backendUrl,
		status: 'ready'
	})
}
===== src/app/page.tsx =====
'use client'

import { useCallback, useMemo, useState } from 'react'
import Image from 'next/image'
import { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { cn } from '@/lib/utils'

const CATEGORIES = ['All', 'AI', 'Web3', 'Data Viz', 'UI Systems'] as const

interface ProjectLink {
	label: string
	href: string
}
interface Project {
	id: string
	title: string
	tagline: string
	category: (typeof CATEGORIES)[number] | 'AI' | 'Web3' | 'Data Viz' | 'UI Systems'
	tags: string[]
	cover: string
	images?: string[]
	links?: ProjectLink[]
}

const PROJECTS: Project[] = [
	{
		id: 'ai-multi-agent',
		title: 'AI Multi-Agent',
		tagline: 'Collaborative agents powered by OpenAI and CrewAI',
		category: 'AI',
		tags: ['React.js', 'Next.js', 'Zustand', 'OpenAI', 'CrewAI', 'Tailwind', 'Python', 'FastAPI'],
		cover: '/projects/ai-multi-agent/image-1.png',
		images: [
			'/projects/ai-multi-agent/image-1.png',
			'/projects/ai-multi-agent/image-2.png',
			'/projects/ai-multi-agent/image-3.png'
		],
		links: [{ label: 'Open App', href: '/ai-multi-agent' }]
	},
	{
		id: 'ai-chat-assistant',
		title: 'AI Chat Assistant',
		tagline: 'Lightweight chat UI with message feedback + copy',
		category: 'AI',
		tags: ['React.js', 'Next.js', 'Zustand', 'OpenAI', 'Tailwind', 'Node.js'],
		cover: '/projects/ai-chat-assistant/image-1.png',
		images: [
			'/projects/ai-chat-assistant/image-1.png',
			'/projects/ai-chat-assistant/image-2.png',
			'/projects/ai-chat-assistant/image-3.png'
		],
		links: [
			{ label: 'Open App', href: '/ai-chat-assistant' },
			{ label: 'GitHub', href: 'https://github.com/flavioespinoza' }
		]
	},
	{
		id: 'ai-llm-data-visualizer',
		title: 'LLM Data Visualizer',
		tagline: 'Prompt → clean data → interactive charts',
		category: 'AI',
		tags: ['React.js', 'Next.js', 'TypeScript', 'D3.js', 'OpenAI', 'Node.js'],
		cover: '/projects/ai-llm-data-visualizer/image-1.png',
		images: [
			'/projects/ai-llm-data-visualizer/image-1.png',
			'/projects/ai-llm-data-visualizer/image-2.png',
			'/projects/ai-llm-data-visualizer/image-3.png'
		],
		links: [
			{ label: 'Live Demo', href: '/ai-llm-data-visualizer' },
			{ label: 'GitHub', href: 'https://github.com/flavioespinoza' }
		]
	},
	{
		id: 'bless-network',
		title: 'Bless Network',
		tagline:
			'Decentralized compute dashboard with multimodal auth, real-time monitoring, and gamified engagement.',
		category: 'Web3',
		tags: [
			'React.js',
			'Next.js',
			'TypeScript',
			'Tailwind CSS',
			'SWR',
			'WebSocket',
			'Recharts',
			'WCAG',
			'Node.js'
		],
		cover: '/projects/bless/image-1.png',
		images: [
			'/projects/bless/image-1.png',
			'/projects/bless/image-2.png',
			'/projects/bless/image-3.png'
		],
		links: [{ label: 'Project Link', href: 'https://bless.network/dashboard' }]
	},
	{
		id: 'akash-console',
		title: 'Akash Console',
		tagline:
			'Web platform that lets you deploy Docker containers on the Akash Network, a decentralized cloud computing marketplace.',
		category: 'Web3',
		tags: ['React.js', 'TypeScript', 'Fastify', 'WebSocket', 'mTLS', 'HTTP/2', 'Node.js'],
		cover: '/projects/akash-console/image-1.png',
		images: [
			'/projects/akash-console/image-1.png',
			'/projects/akash-console/image-2.png',
			'/projects/akash-console/image-3.png'
		],
		links: [{ label: 'Project Link', href: 'https://console.akash.network' }]
	},
	{
		id: 'exemplar',
		title: 'Exemplar',
		tagline:
			'Identity verification UI with multi-step OIDC via Okta, Trust Graph visualization, and real-time document checks.',
		category: 'UI Systems',
		tags: [
			'React.js',
			'Material UI',
			'Redux',
			'D3.js',
			'OIDC',
			'Okta',
			'Jumio',
			'WCAG',
			'Go',
			'Node.js'
		],
		cover: '/projects/exemplar/image-1.png',
		images: [
			'/projects/exemplar/image-1.png',
			'/projects/exemplar/image-2.png',
			'/projects/exemplar/image-3.png'
		],
		links: []
	},
	{
		id: 'street-fighter',
		title: 'Street Fighter',
		tagline:
			'Real-time trading dashboard with sub-second order book updates, TA overlays, and interactive order controls.',
		category: 'Web3',
		tags: ['React.js', 'D3.js', 'Socket.IO', 'WebSocket', 'Trading', 'Node.js'],
		cover: '/projects/street-fighter/image-1.png',
		images: [
			'/projects/street-fighter/image-1.png',
			'/projects/street-fighter/image-2.png',
			'/projects/street-fighter/image-3.png'
		],
		links: []
	},
	{
		id: 'swim-ai',
		title: 'Swim AI',
		tagline:
			'Interactive mapping application with D3.js overlays for real-time IoT device tracking and analytics',
		category: 'Data Viz',
		tags: ['React.js', 'D3.js', 'Google Maps API', 'FLUX', 'IoT', 'Node.js'],
		cover: '/projects/swim-ai/image-1.png',
		images: [
			'/projects/swim-ai/image-1.png',
			'/projects/swim-ai/image-2.png',
			'/projects/swim-ai/image-3.png'
		],
		links: []
	},
	{
		id: 'vivint-solar',
		title: 'Vivint Solar',
		tagline:
			'Modular analytics platform with lazy loading, real-time data visualization, and scalable architecture for high-volume processing',
		category: 'Data Viz',
		tags: ['Angular', 'D3.js', 'Modular Architecture', 'Node.js'],
		cover: '/projects/vivint-solar/image-1.png',
		images: [
			'/projects/vivint-solar/image-1.png',
			'/projects/vivint-solar/image-2.png',
			'/projects/vivint-solar/image-3.png'
		],
		links: [
			{ label: 'Video Demo', href: 'https://www.loom.com/share/251e47d0a3304ec5afc45178fa7d0cb2' }
		]
	},
	{
		id: 'attensity',
		title: 'Attensity',
		tagline:
			'Enterprise CRM platform with high-performance D3.js visualizations for real-time financial data serving Fortune 500 clients',
		category: 'Data Viz',
		tags: ['JavaScript', 'D3.js', 'Enterprise', 'CRM', 'Node.js'],
		cover: '/projects/attensity/image-2.png',
		images: [
			'/projects/attensity/image-2.png',
			'/projects/attensity/image-3.png',
			'/projects/attensity/image-4.png'
		],
		links: []
	},
	{
		id: 'commits-analytics',
		title: 'Commits Analytics',
		tagline: 'Morphing charts + CSV export of GitHub contributions',
		category: 'Data Viz',
		tags: ['React.js', 'Next.js', 'Salsa-UI', 'D3.js', 'CSV', 'Node.js'],
		cover: '/projects/commits/image-1.png',
		images: [
			'/projects/commits/image-1.png',
			'/projects/commits/image-2.png',
			'/projects/commits/image-3.png'
		],
		links: [{ label: 'Live Demo', href: '/commits' }]
	}
]

export default function FeaturedProjectsPage() {
	const [query, setQuery] = useState('')
	const [activeCategory, setActiveCategory] = useState<(typeof CATEGORIES)[number]>('All')

	const filtered = useMemo(() => {
		const q = query.trim().toLowerCase()
		return PROJECTS.filter((p) => {
			const matchesCategory = activeCategory === 'All' || p.category === activeCategory
			const matchesQuery = !q
				? true
				: [p.title, p.tagline, p.tags.join(' ')].join(' ').toLowerCase().includes(q)
			return matchesCategory && matchesQuery
		})
	}, [query, activeCategory])

	return (
		<main className="mx-auto max-w-6xl px-6 py-10 text-white">
			<header className="mb-8 space-y-3">
				<div className="mb-6">
					<h1 className="text-3xl font-bold tracking-tight text-white">
						Flavio Espinoza | Development Portfolio
					</h1>
					<p className="pt-2 text-sm">
						Creative and technically versatile developer with 11+ years of experience building
						high-impact, production-grade applications using React.js, Node.js, and TypeScript.
						Proven ability to ship full-stack features end-to-end—from idea to production—across
						Web3, FinTech, and AI-first platforms. Adept at collaborating directly with founders and
						product leaders in fast-paced startup environments. Strong background in real-time data
						systems, D3.js visualization, and OpenAI integration for AI-augmented development.
					</p>
				</div>
				<div className="mb-6">
					<h1 className="text-2xl font-bold tracking-tight text-white">Featured Projects</h1>
					<p className="pt-2 text-sm">
						Clean, scannable project grid with filters. Hover or open a project for more visuals +
						links.
					</p>
				</div>
				<div className="flex flex-col gap-3 pt-6 sm:flex-row sm:items-center sm:justify-between">
					<Tabs value={activeCategory} onValueChange={(v) => setActiveCategory(v as any)}>
						<TabsList>
							{CATEGORIES.map((c) => (
								<TabsTrigger key={c} value={c}>
									{c}
								</TabsTrigger>
							))}
						</TabsList>
					</Tabs>

					<div className="relative w-full sm:w-72">
						<input
							type="text"
							placeholder="Search by title, tag, or tech…"
							className="w-full rounded-md border border-border bg-background px-3 py-2 text-sm outline-none ring-offset-background focus:ring-2 focus:ring-ring"
							value={query}
							onChange={(e) => setQuery(e.target.value)}
						/>
					</div>
				</div>
			</header>

			{/* Grid */}
			<section
				className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
				aria-label="Project grid"
			>
				{filtered.map((p) => (
					<ProjectCard key={p.id} project={p} />
				))}
			</section>

			{filtered.length === 0 && (
				<div className="mt-12 rounded-md border p-6 text-center text-sm text-muted-foreground">
					No projects match your filters.
				</div>
			)}

			{/* SEO helpers */}
			<Tabs className="sr-only" value={activeCategory}>
				{CATEGORIES.map((c) => (
					<TabsContent key={c} value={c} />
				))}
			</Tabs>
		</main>
	)
}

function ProjectCard({ project }: { project: Project }) {
	const [open, setOpen] = useState(false)
	const close = useCallback(() => setOpen(false), [])

	return (
		<article
			className={cn(
				'group relative overflow-hidden rounded-2xl border border-border bg-card shadow-sm transition-shadow hover:shadow-lg'
			)}
		>
			<Dialog open={open} onOpenChange={setOpen}>
				<DialogTrigger asChild>
					<button
						onClick={() => setOpen(true)}
						className="block w-full text-left focus:outline-none"
						aria-label={`Open details for ${project.title}`}
					>
						<figure className="relative aspect-video overflow-hidden">
							<Image
								src={project.cover}
								alt={`${project.title} cover`}
								fill
								sizes="(max-width: 768px) 100vw, (max-width: 1280px) 50vw, 33vw"
								className="object-cover transition-transform duration-300 ease-out group-hover:scale-[1.03]"
								priority={false}
							/>
							<div
								className="pointer-events-none absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100"
								style={{
									background: 'linear-gradient(180deg, rgba(0,0,0,0) 50%, rgba(0,0,0,0.35) 100%)'
								}}
							/>
						</figure>

						<div className="space-y-2 p-4">
							<div className="flex items-center justify-between">
								<h2 className="text-base font-semibold leading-snug text-black">{project.title}</h2>
								<span className="rounded-full border px-2 py-0.5 text-xs text-muted-foreground">
									{project.category}
								</span>
							</div>
							<p className="line-clamp-2 text-sm text-muted-foreground">{project.tagline}</p>

							<ul className="mt-2 flex flex-wrap gap-1">
								{project.tags.map((t, i) => (
									<li
										key={i}
										className="rounded-md border px-2 py-0.5 text-[11px] text-muted-foreground"
									>
										{t}
									</li>
								))}
							</ul>
						</div>
					</button>
				</DialogTrigger>

				<DialogContent title={project.title} description={project.tagline}>
					{/* Gallery: stack on tablet (md) & mobile; only split into columns on desktop */}
					{project.images && project.images.length > 0 && (
						<div className="mx-auto">
							<div className="grid grid-cols-1 gap-3 lg:grid-cols-2 xl:grid-cols-3">
								{project.images.map((src, i) => (
									<div key={src} className="relative aspect-[4/3] overflow-hidden rounded-md">
										<Image
											src={src}
											alt={`${project.title} screenshot ${i + 1}`}
											fill
											className="object-cover"
										/>
									</div>
								))}
							</div>
						</div>
					)}

					{/* Links */}
					{project.links && project.links.length > 0 && (
						<div className="mt-4 flex flex-wrap gap-2">
							{project.links.map((l) => (
								<a
									key={l.href}
									href={l.href}
									className="rounded-md border px-3 py-1 text-sm hover:bg-muted"
									target={l.href.startsWith('http') ? '_blank' : undefined}
									rel={l.href.startsWith('http') ? 'noopener noreferrer' : undefined}
								>
									{l.label}
								</a>
							))}
						</div>
					)}
				</DialogContent>
			</Dialog>
		</article>
	)
}
===== src/app/ai-chat-assistant/components/chat-copy-button.tsx =====
'use client'

import { useState } from 'react'
import { Button, Tooltip } from '@flavioespinoza/salsa-ui'
import { Check, Copy } from 'lucide-react'

interface ChatCopyButtonProps {
	text: string
}

export function ChatCopyButton({ text }: ChatCopyButtonProps) {
	const [copied, setCopied] = useState(false)

	const handleCopy = async () => {
		await navigator.clipboard.writeText(text)
		setCopied(true)
		setTimeout(() => setCopied(false), 1500)
	}

	return (
		<Button
			type="button"
			variant="ghost"
			onClick={handleCopy}
			className="flex h-auto w-auto items-center p-1 text-xs text-black hover:bg-hotpink-300"
		>
			{copied ? (
				<Check className="h-4 w-4" />
			) : (
				<Tooltip content="Copy">
					<Copy className="h-4 w-4" />
				</Tooltip>
			)}
		</Button>
	)
}
===== src/app/ai-chat-assistant/components/chat-feedback.tsx =====
'use client'

import { useChatStore } from '@/store/chat-store'
import { Button } from '@flavioespinoza/salsa-ui'
import { ThumbsDown, ThumbsUp } from 'lucide-react'

interface ChatFeedbackProps {
	index: number
}

export function ChatFeedback({ index }: ChatFeedbackProps) {
	const { messages, updateMessageFeedback } = useChatStore()
	const feedback = messages[index]?.feedback || null

	return (
		<div className="flex items-center space-x-1">
			<Button
				type="button"
				variant="ghost"
				size="icon"
				onClick={() => updateMessageFeedback(index, 'up')}
				className="h-6 w-6 p-1 hover:bg-hotpink-300"
			>
				<ThumbsUp
					className={`h-4 w-4 ${feedback === 'up' ? 'fill-black text-black' : 'text-black'}`}
				/>
			</Button>
			<Button
				type="button"
				variant="ghost"
				size="icon"
				onClick={() => updateMessageFeedback(index, 'down')}
				className="h-6 w-6 p-1 hover:bg-hotpink-300"
			>
				<ThumbsDown
					className={`h-4 w-4 ${feedback === 'down' ? 'fill-black text-black' : 'text-black'}`}
				/>
			</Button>
		</div>
	)
}
===== src/app/ai-chat-assistant/components/message-list.tsx =====
import { useEffect, useRef } from 'react'
import MarkdownWithCode from '@/components/markdown-with-code'
import { Message, useChatStore } from '@/store/chat-store'
import { ChatCopyButton } from './chat-copy-button'
import { ChatFeedback } from './chat-feedback'

interface MessageListProps {
	isTyping: boolean
}

export function MessageList({ isTyping }: MessageListProps) {
	const { messages } = useChatStore()
	const bottomRef = useRef<HTMLDivElement>(null)

	useEffect(() => {
		bottomRef.current?.scrollIntoView({ behavior: 'smooth' })
	}, [messages])

	return (
		<div id="chat_bubbles" className="space-y-3">
			{messages.map((msg, idx) => (
				<div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
					<div
						className={`animate-fade-in relative max-w-[80%] rounded-xl px-4 py-2 text-sm text-black transition-all duration-200 ease-in-out ${
							msg.role === 'user'
								? 'border border-solid border-zinc-300 bg-cblue-300'
								: 'bg-sage-200'
						}`}
					>
						<p className="mb-1 text-xs text-white">
							{msg.role === 'user' ? 'You' : 'AI'} · {new Date(msg.createdAt).toLocaleTimeString()}
						</p>

						<div className="whitespace-normal [&>*]:mb-1 [&>*]:mt-1">
							<MarkdownWithCode markdown={msg.text} />
						</div>

						{msg.role === 'assistant' && (
							<div className="mt-3 flex items-center space-x-2">
								<ChatCopyButton text={msg.text} />
								<ChatFeedback index={idx} />
							</div>
						)}
					</div>
				</div>
			))}
			{isTyping && <div className="text-sm italic text-white">AI is typing…</div>}
			<div ref={bottomRef} />
		</div>
	)
}
===== src/app/ai-chat-assistant/components/chat-input-form.tsx =====
import React, { useRef, useState } from 'react'
import { useChatStore } from '@/store/chat-store'
import { Button, Checkbox, Textarea } from '@flavioespinoza/salsa-ui'
import { getAiReply } from '../actions'

interface ChatInputFormProps {
	isTyping: boolean
	setIsTyping: React.Dispatch<React.SetStateAction<boolean>>
	addMessage: (message: { role: 'user' | 'assistant'; text: string; createdAt: string }) => void
}

export function ChatInputForm({ isTyping, setIsTyping, addMessage }: ChatInputFormProps) {
	const { messages, clearMessages } = useChatStore()
	const [input, setInput] = useState('')
	const [sendOnEnterOnly, setSendOnEnterOnly] = useState(true)
	const inputRef = useRef<HTMLTextAreaElement>(null)

	const handleSubmitAction = async (e: React.FormEvent) => {
		e.preventDefault()
		const text = input.trim()
		if (!text || isTyping) return

		setIsTyping(true)
		setInput('')
		const userMessage = { role: 'user' as const, text, createdAt: new Date().toISOString() }
		addMessage(userMessage)

		const messagesForApi = [
			...messages.map((m) => ({ role: m.role, content: m.text })),
			{ role: userMessage.role, content: userMessage.text }
		]

		try {
			const result = await getAiReply(messagesForApi)

			if (result.success) {
				addMessage({
					role: 'assistant',
					text: result.reply,
					createdAt: new Date().toISOString()
				})
			} else {
				addMessage({
					role: 'assistant',
					text: `Error: ${result.error}`,
					createdAt: new Date().toISOString()
				})
			}
		} catch (error) {
			console.error('Failed to get AI reply:', error)
			addMessage({
				role: 'assistant',
				text: 'Sorry, there was an error processing your request.',
				createdAt: new Date().toISOString()
			})
		} finally {
			setIsTyping(false)
		}
	}

	const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
		if (sendOnEnterOnly) {
			if (e.key === 'Enter' && !e.shiftKey) {
				e.preventDefault()
				handleSubmitAction(e as unknown as React.FormEvent)
			}
		} else {
			if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
				e.preventDefault()
				handleSubmitAction(e as unknown as React.FormEvent)
			}
		}
	}

	const ButtonSend = () => (
		<>
			<Checkbox
				id="sendOnEnter"
				className={`mr-1 mt-3 bg-hotpink-200 ${sendOnEnterOnly ? 'bg-hotpink-400' : 'bg-sage-200'} text-white`}
				checked={sendOnEnterOnly}
				onCheckedChange={() => setSendOnEnterOnly(!sendOnEnterOnly)}
			/>
			<label className="mr-2 mt-2 text-xs" htmlFor="sendOnEnter">
				{' '}
				Send w/ Enter
			</label>
			<Button type="submit" variant="default" disabled={isTyping || !input.trim()}>
				Send Message
			</Button>
		</>
	)

	return (
		<form onSubmit={handleSubmitAction} className="w-full max-w-[calc(640px+2rem)] px-4">
			<div className="space-y-3 rounded-xl border border-zinc-100 bg-white p-4 shadow-xl">
				<Textarea
					ref={inputRef}
					value={input}
					onChange={(e) => setInput(e.target.value)}
					onKeyDown={handleKeyDown}
					placeholder="Ask anything"
					rows={2}
					className="resize-y border border-solid border-zinc-300 bg-cblue-300 text-black"
					disabled={isTyping}
				/>
				<div className="flex items-center justify-between">
					{' '}
					<Button
						variant="outline"
						type="button"
						onClick={clearMessages}
						className="hover:bg-cblue-500/60"
					>
						New Chat
					</Button>
					<div className="flex items-center gap-2">
						{' '}
						<ButtonSend />
					</div>
				</div>
			</div>
		</form>
	)
}
===== src/app/ai-chat-assistant/actions.ts =====
'use server'

import { z } from 'zod'

const messageSchema = z.object({
	role: z.enum(['user', 'assistant', 'system']),
	content: z.string()
})

const getReplySchema = z.array(messageSchema)

type ActionResult = { success: true; reply: string } | { success: false; error: string }

export async function getAiReply(messages: z.infer<typeof getReplySchema>): Promise<ActionResult> {
	const validationResult = getReplySchema.safeParse(messages)
	if (!validationResult.success) {
		console.error('Invalid input format:', validationResult.error)
		return { success: false, error: 'Invalid message format.' }
	}

	const apiKey = process.env.OPENAI_API_KEY
	if (!apiKey) {
		console.error('OpenAI API key is not configured.')
		return { success: false, error: 'Server configuration error!' }
	}

	try {
		const res = await fetch('https://api.openai.com/v1/chat/completions', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Authorization: `Bearer ${apiKey}`
			},
			body: JSON.stringify({
				model: 'gpt-4o-2024-05-13',
				messages: validationResult.data,
				temperature: 0.7
			})
		})

		if (!res.ok) {
			const errorText = await res.text()
			console.error(`OpenAI API error (${res.status}):`, errorText)
			return { success: false, error: `OpenAI API request failed (Status: ${res.status})` }
		}

		const json = await res.json()
		const reply = json.choices?.[0]?.message?.content

		if (!reply) {
			console.error('No reply content found in OpenAI response:', json)
			return {
				success: false,
				error: 'Action error: Sorry, something went wrong receiving the reply.'
			}
		}

		return { success: true, reply }
	} catch (err: unknown) {
		console.error('Chat action error:', err)
		const errorMessage =
			err instanceof Error ? err.message : 'Action error: An unexpected server error occurred.'
		return { success: false, error: `Server error: ${errorMessage}` }
	}
}
===== src/app/ai-chat-assistant/page.tsx =====
'use client'

import { useState } from 'react'
import { useChatStore } from '@/store/chat-store'
import { ChatInputForm } from './components/chat-input-form'
import { MessageList } from './components/message-list'

export default function ChatPage() {
	const { messages, addMessage } = useChatStore()
	const [isTyping, setIsTyping] = useState(false)

	const isEmpty = messages.length === 0

	return (
		<main
			className={`relative mx-auto flex max-w-xl flex-col px-4 pt-4 ${
				isEmpty ? 'min-h-[calc(100vh-150px)] items-center justify-center' : 'pb-[120px]'
			}`}
		>
			{isEmpty ? (
				<div className="mb-6 text-center text-lg text-white">How can I help you today?</div>
			) : (
				<MessageList isTyping={isTyping} />
			)}

			{isEmpty ? (
				<ChatInputForm isTyping={isTyping} setIsTyping={setIsTyping} addMessage={addMessage} />
			) : (
				<div className="fixed bottom-4 left-1/2 w-full -translate-x-1/2 transform sm:bottom-8">
					<div className="mx-auto flex justify-center">
						<ChatInputForm isTyping={isTyping} setIsTyping={setIsTyping} addMessage={addMessage} />
					</div>
				</div>
			)}
		</main>
	)
}
===== src/components/wallet-connection.tsx =====
'use client';

import { useEffect, useState } from 'react';
import { useAppDispatch, useAppSelector } from '@/redux/hooks';
import { connectWallet, disconnect, switchChain } from '@/redux/wallet-slice';

const CHAIN_NAMES: Record<number, string> = {
  1: 'Ethereum Mainnet',
  11155111: 'Sepolia Testnet',
  137: 'Polygon',
  56: 'BSC',
  42161: 'Arbitrum',
  8453: 'Base',
  10: 'Optimism',
};

export default function WalletConnection() {
  const dispatch = useAppDispatch();
  const { address, chainId, isConnecting, isConnected, error } = useAppSelector(
    (state) => state.wallet
  );
  const [hasMetaMask, setHasMetaMask] = useState<boolean | null>(null);

  useEffect(() => {
    const checkMetaMask = () => {
      if (typeof window !== 'undefined') {
        setHasMetaMask(typeof window.ethereum !== 'undefined');
      }
    };

    checkMetaMask();
    window.addEventListener('ethereum#initialized', checkMetaMask);
    const timeout = setTimeout(checkMetaMask, 1000);

    return () => {
      window.removeEventListener('ethereum#initialized', checkMetaMask);
      clearTimeout(timeout);
    };
  }, []);

  useEffect(() => {
    if (typeof window.ethereum !== 'undefined') {
      const handleAccountsChanged = (accounts: string[]) => {
        if (accounts.length === 0) {
          dispatch(disconnect());
        } else if (accounts[0] !== address) {
          dispatch(connectWallet());
        }
      };

      const handleChainChanged = (chainId: string) => {
        dispatch(switchChain(parseInt(chainId, 16)));
      };

      window.ethereum.on('accountsChanged', handleAccountsChanged);
      window.ethereum.on('chainChanged', handleChainChanged);

      return () => {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      };
    }
  }, [address, dispatch]);

  const handleConnect = async () => {
    if (!hasMetaMask) {
      alert('Please install MetaMask to connect your wallet.');
      window.open('https://metamask.io/download/', '_blank');
      return;
    }

    const result = await dispatch(connectWallet());
    if (connectWallet.fulfilled.match(result)) {
      console.log('✅ Wallet connected:', result.payload);
    } else if (connectWallet.rejected.match(result)) {
      console.error('❌ Connection failed:', result.payload);
    }
  };

  const handleDisconnect = () => {
    dispatch(disconnect());
  };

  const copyAddress = () => {
    if (address) {
      navigator.clipboard.writeText(address);
      alert('Address copied to clipboard!');
    }
  };

  const handleSwitchNetwork = async (targetChainId: number) => {
    if (!window.ethereum) return;

    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: `0x${targetChainId.toString(16)}` }],
      });
      dispatch(switchChain(targetChainId));
    } catch (error: any) {
      console.error('Failed to switch network:', error);
      if (error.code === 4902) {
        alert('This network is not available in your MetaMask. Please add it manually.');
      }
    }
  };

  if (hasMetaMask === false) {
    return (
      <div className="p-6 border border-orange-200 rounded-lg bg-orange-50 shadow-sm">
        <div className="text-center space-y-4">
          <div className="w-16 h-16 mx-auto bg-orange-100 rounded-full flex items-center justify-center">
            <span className="text-4xl">🦊</span>
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-1">
              MetaMask Not Detected
            </h3>
            <p className="text-sm text-gray-600 mb-4">
              Please install MetaMask browser extension to connect your wallet
            </p>
          </div>
          <a
            href="https://metamask.io/download/"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-block px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors font-medium"
          >
            Install MetaMask
          </a>
        </div>
      </div>
    );
  }

  if (hasMetaMask === null) {
    return (
      <div className="p-6 border border-gray-200 rounded-lg bg-gray-50 shadow-sm">
        <div className="flex items-center justify-center gap-3">
          <div className="animate-spin h-5 w-5 border-2 border-gray-400 border-t-transparent rounded-full" />
          <span className="text-gray-600 font-medium">Checking for MetaMask...</span>
        </div>
      </div>
    );
  }

  if (isConnecting) {
    return (
      <div className="p-6 border border-blue-200 rounded-lg bg-blue-50 shadow-sm">
        <div className="flex flex-col items-center gap-3">
          <div className="animate-spin h-8 w-8 border-3 border-blue-600 border-t-transparent rounded-full" />
          <div className="text-center">
            <p className="text-blue-800 font-semibold mb-1">Connecting...</p>
            <p className="text-sm text-blue-600">
              Please check MetaMask popup and approve the connection
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (isConnected && address) {
    return (
      <div className="p-6 border border-green-200 rounded-lg bg-white shadow-lg">
        <div className="space-y-4">
          <div className="flex items-center justify-between pb-3 border-b border-gray-100">
            <div className="flex items-center gap-2 text-green-600">
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                  clipRule="evenodd"
                />
              </svg>
              <span className="font-semibold">Wallet Connected</span>
            </div>
            <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse" />
          </div>

          <div>
            <p className="text-xs text-gray-500 uppercase tracking-wide mb-2">
              Wallet Address
            </p>
            <div className="flex items-center gap-2 p-3 bg-gray-50 rounded-lg">
              <code className="text-sm font-mono font-semibold text-gray-900 flex-1">
                {address.slice(0, 8)}...{address.slice(-6)}
              </code>
              <button
                onClick={copyAddress}
                className="p-2 hover:bg-gray-200 rounded transition-colors"
                title="Copy address"
              >
                <svg
                  className="w-4 h-4 text-gray-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                  />
                </svg>
              </button>
            </div>
          </div>

          {chainId && (
            <div>
              <p className="text-xs text-gray-500 uppercase tracking-wide mb-2">
                Network
              </p>
              <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full" />
                  <span className="text-sm font-medium text-gray-900">
                    {CHAIN_NAMES[chainId] || `Chain ${chainId}`}
                  </span>
                </div>
                <span className="text-xs px-2 py-1 bg-white border border-gray-200 rounded-full text-gray-600">
                  ID: {chainId}
                </span>
              </div>
            </div>
          )}

          <div>
            <p className="text-xs text-gray-500 uppercase tracking-wide mb-2">
              Switch Network
            </p>
            <div className="grid grid-cols-2 gap-2">
              <button
                onClick={() => handleSwitchNetwork(1)}
                disabled={chainId === 1}
                className={`px-3 py-2 text-sm rounded-lg border transition-colors ${
                  chainId === 1
                    ? 'bg-blue-50 border-blue-200 text-blue-700 cursor-not-allowed'
                    : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50'
                }`}
              >
                Ethereum
              </button>
              <button
                onClick={() => handleSwitchNetwork(137)}
                disabled={chainId === 137}
                className={`px-3 py-2 text-sm rounded-lg border transition-colors ${
                  chainId === 137
                    ? 'bg-purple-50 border-purple-200 text-purple-700 cursor-not-allowed'
                    : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50'
                }`}
              >
                Polygon
              </button>
            </div>
          </div>

          <div className="flex gap-2 pt-3 border-t border-gray-100">
            <button
              onClick={handleConnect}
              className="flex-1 px-4 py-2.5 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
            >
              Reconnect
            </button>
            <button
              onClick={handleDisconnect}
              className="flex-1 px-4 py-2.5 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors"
            >
              Disconnect
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 border border-gray-200 rounded-lg bg-white shadow-lg">
      <div className="text-center space-y-6">
        <div className="w-20 h-20 mx-auto bg-gradient-to-br from-orange-400 to-orange-600 rounded-full flex items-center justify-center shadow-lg">
          <span className="text-5xl">🦊</span>
        </div>
        
        <div>
          <h3 className="text-2xl font-bold text-gray-900 mb-2">
            Connect Your Wallet
          </h3>
          <p className="text-sm text-gray-600 max-w-sm mx-auto">
            Connect with MetaMask to interact with blockchain applications. 
            Your wallet will open in a popup.
          </p>
        </div>

        <button
          onClick={handleConnect}
          className="w-full px-6 py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all font-semibold text-lg shadow-md hover:shadow-lg flex items-center justify-center gap-3"
        >
          <span>Connect MetaMask</span>
          <svg
            className="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M13 7l5 5m0 0l-5 5m5-5H6"
            />
          </svg>
        </button>

        {error && (
          <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
            <div className="flex items-start gap-3">
              <svg
                className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clipRule="evenodd"
                />
              </svg>
              <div className="flex-1">
                <p className="text-sm font-medium text-red-800">{error}</p>
                <button
                  onClick={handleConnect}
                  className="text-xs text-red-700 hover:text-red-800 underline mt-1"
                >
                  Try again
                </button>
              </div>
            </div>
          </div>
        )}

        <div className="pt-4 border-t border-gray-100">
          <p className="text-xs text-gray-500">
            New to Ethereum?{' '}
            <a
              href="https://metamask.io/download/"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 hover:text-blue-700 underline font-medium"
            >
              Get MetaMask
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}===== src/components/ui/tabs.tsx =====
'use client'

import React from 'react'
import * as TabsPrimitive from '@radix-ui/react-tabs'
import { cn } from '@/lib/utils'

export const Tabs = TabsPrimitive.Root

export const TabsList = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.List>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.List
		ref={ref}
		className={cn(
			'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',
			className
		)}
		{...props}
	/>
))
TabsList.displayName = TabsPrimitive.List.displayName

export const TabsTrigger = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.Trigger>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.Trigger
		ref={ref}
		className={cn(
			'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all hover:text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground',
			className
		)}
		{...props}
	/>
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

export const TabsContent = React.forwardRef<
	React.ElementRef<typeof TabsPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
	<TabsPrimitive.Content
		ref={ref}
		className={cn('mt-2 rounded-md border p-6', className)}
		{...props}
	/>
))
TabsContent.displayName = TabsPrimitive.Content.displayName
===== src/components/ui/alert.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'
import { AlertTriangle, CheckCircle2, Info } from 'lucide-react'

export type AlertType = 'info' | 'success' | 'warning' | 'error'

const iconMap = {
	info: Info,
	success: CheckCircle2,
	warning: AlertTriangle,
	error: AlertTriangle
}

export function Alert({
	title,
	message,
	type = 'info',
	className
}: {
	title?: string
	message: string
	type?: AlertType
	className?: string
}) {
	const Icon = iconMap[type]
	return (
		<div className={cn('flex items-start gap-3 rounded-md border px-4 py-3 text-sm', className)}>
			<Icon className="mt-0.5 h-5 w-5 text-muted-foreground" />
			<div>
				{title && <div className="font-medium">{title}</div>}
				<div>{message}</div>
			</div>
		</div>
	)
}
===== src/components/ui/dialog.tsx =====
'use client'

import * as DialogPrimitive from '@radix-ui/react-dialog'
import { cn } from '@/lib/utils'
import { VisuallyHidden } from '@radix-ui/react-visually-hidden'
import { X } from 'lucide-react'

export const Dialog = DialogPrimitive.Root
export const DialogTrigger = DialogPrimitive.Trigger
export const DialogPortal = DialogPrimitive.Portal
export const DialogOverlay = DialogPrimitive.Overlay
export const DialogTitle = DialogPrimitive.Title
export const DialogDescription = DialogPrimitive.Description
export const DialogClose = DialogPrimitive.Close

type ContentProps = {
	title: string
	description?: string
	children?: React.ReactNode
	className?: string
}

export function DialogContent({ title, description, children, className }: ContentProps) {
	const closeRowClass = description ? 'row-start-2' : 'row-start-1'

	return (
		<DialogPortal>
			<DialogOverlay
				className={cn(
					'fixed inset-0 z-40 bg-black/40 backdrop-blur-sm',
					'data-[state=open]:animate-in data-[state=closed]:animate-out',
					'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
					'motion-reduce:animate-none'
				)}
			/>
			<DialogPrimitive.Content
				className={cn(
					// Centered panel
					'fixed left-1/2 top-1/2 z-50 -translate-x-1/2 -translate-y-1/2',
					// Width: 100% mobile, 90% tablet, 80% desktop
					'w-[100vw] max-w-none md:w-[90vw] lg:w-[80vw]',
					// Layout/overflow
					'origin-center rounded-lg bg-background p-6 shadow-lg outline-none',
					'max-h-[90vh] overflow-y-auto',
					// Fade only (no directional slides)
					'data-[state=open]:animate-in data-[state=closed]:animate-out',
					'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
					'motion-reduce:animate-none',
					className
				)}
			>
				{/* Header */}
				<div className="mb-4">
					<div className="flex items-center justify-between gap-3">
						<DialogTitle className="text-lg font-semibold">{title}</DialogTitle>

						<DialogClose
							aria-label="Close"
							className="inline-flex h-8 w-8 items-center justify-center rounded text-muted-foreground transition-colors hover:bg-muted hover:text-foreground"
						>
							<X className="h-4 w-4" />
						</DialogClose>
					</div>

					{description && (
						<DialogDescription className="mt-1 text-sm text-muted-foreground">
							{description}
						</DialogDescription>
					)}
				</div>

				<div>{children}</div>
			</DialogPrimitive.Content>
		</DialogPortal>
	)
}
===== src/components/ui/button.tsx =====
// Create a Button component with strict typing
// Requirements:
// - variant: 'primary' | 'secondary' | 'danger'
// - size: 'sm' | 'md' | 'lg'
// - Optional icon prop
// - Children can be string or ReactNode
// - All standard button props should be supported

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
	variant: 'primary' | 'secondary' | 'danger'
	size: 'sm' | 'md' | 'lg'
	icon?: React.ReactNode
	children: React.ReactNode
}

const Button: React.FC<ButtonProps> = (props) => {
	const { variant, size, icon, children, className, ...rest } = props

	// Base styles for all buttons
	const baseStyles =
		'rounded font-semibold transition-colors inline-flex items-center justify-center'

	// Variant-specific styles
	const variantStyles = {
		primary: 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800',
		secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 active:bg-gray-400',
		danger: 'bg-red-600 text-white hover:bg-red-700 active:bg-red-800'
	}

	// Size-specific styles
	const sizeStyles = {
		sm: 'px-3 py-1.5 text-sm',
		md: 'px-4 py-2 text-base',
		lg: 'px-6 py-3 text-lg'
	}

	// Combine all styles
	const combinedClassName =
		`${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${className || ''}`.trim()

	return (
		<button className={combinedClassName} {...rest}>
			{icon && <span className="mr-2">{icon}</span>}
			{children}
		</button>
	)
}

export default Button
===== src/components/ui/select.tsx =====
'use client'

import * as React from 'react'
import { cn } from '@/lib/utils'
import {
	Select as RadixSelect,
	SelectContent,
	SelectGroup,
	SelectItem,
	SelectLabel,
	SelectTrigger,
	SelectValue
} from '@radix-ui/react-select'

interface SelectProps {
	value: string
	onValueChange: (value: string) => void
	options: { label: string; value: string }[]
	placeholder?: string
	className?: string
}

export function Select({ value, onValueChange, options, placeholder, className }: SelectProps) {
	return (
		<RadixSelect value={value} onValueChange={onValueChange}>
			<SelectTrigger className={cn('h-10 w-full rounded border px-3 py-2 text-sm', className)}>
				<SelectValue placeholder={placeholder || 'Select'} />
			</SelectTrigger>
			<SelectContent>
				<SelectGroup>
					<SelectLabel>{placeholder}</SelectLabel>
					{options.map((opt) => (
						<SelectItem key={opt.value} value={opt.value}>
							{opt.label}
						</SelectItem>
					))}
				</SelectGroup>
			</SelectContent>
		</RadixSelect>
	)
}
===== src/components/layout/navbar.tsx =====
'use client'

import { useEffect, useState } from 'react'
import Link from 'next/link'
import { cn } from '@/lib/utils'

const links = [
	{ href: '/', label: 'Home' },
	{ href: '/ai-multi-agent', label: 'AI Multi-Agent' },
	{ href: '/ai-chat-assistant', label: 'AI Chat' },
	{ href: '/ai-llm-data-visualizer', label: 'AI LLM Data Visualizer' },
	{ href: '/wallet', label: 'Wallet' },
	{ href: '/contact', label: 'Contact' }
]

export function Navbar() {
	const [isScrolled, setIsScrolled] = useState(false)

	useEffect(() => {
		const onScroll = () => setIsScrolled(window.scrollY > 10)
		window.addEventListener('scroll', onScroll)
		return () => window.removeEventListener('scroll', onScroll)
	}, [])

	return (
		<header
			className={cn(
				'supports-[backdrop-filter]:bg-background/80 sticky top-0 z-50 w-full backdrop-blur transition-all',
				isScrolled && 'border-b border-black/10 shadow-sm'
			)}
		>
			<div className="mx-auto flex max-w-6xl items-center justify-between px-6 py-3 text-white">
				<div className="flex gap-4 text-sm font-medium">
					{links.map(({ href, label }) => (
						<Link key={href} href={href} className="transition-colors hover:text-hotpink-300">
							{label}
						</Link>
					))}
				</div>
			</div>
		</header>
	)
}
===== src/components/layout/container.tsx =====
import { cn } from '@/lib/utils'

export function Container({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <div className={cn('mx-auto max-w-5xl px-6', className)} {...props} />
}
===== src/components/layout/section.tsx =====
import { cn } from '@/lib/utils'

export function Section({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
	return <section className={cn('space-y-6 py-12', className)} {...props} />
}
===== src/components/layout/footer.tsx =====
export function Footer() {
	return (
		<footer className="w-full border-t px-6 py-4 text-center text-sm text-muted-foreground">
			Built by Flavio Espinoza — © {new Date().getFullYear()}
		</footer>
	)
}
===== src/components/providers/theme-provider.tsx =====
'use client'

import { ThemeProvider } from 'next-themes'

export function AppThemeProvider({ children }: { children: React.ReactNode }) {
	return (
		<ThemeProvider attribute="class" defaultTheme="system" enableSystem>
			{children}
		</ThemeProvider>
	)
}
===== src/components/providers/store-provider.tsx =====
'use client'

import { useRef } from 'react'
import { Provider } from 'react-redux'
import { AppStore, makeStore } from '@/redux/store'

export default function StoreProvider({ children }: { children: React.ReactNode }) {
	const storeRef = useRef<AppStore>()

	if (!storeRef.current) {
		storeRef.current = makeStore()
	}

	return <Provider store={storeRef.current}>{children}</Provider>
}
===== src/components/markdown-with-code.tsx =====
'use client'

import React, { useState } from 'react'
import ReactMarkdown from 'react-markdown'
import { Prism as SyntaxHighlighterBase } from 'react-syntax-highlighter'
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'
import { Button } from '@flavioespinoza/salsa-ui'
import { Check, Copy } from 'lucide-react'

interface MarkdownWithCodeProps {
	markdown: string
}

const MarkdownWithCode: React.FC<MarkdownWithCodeProps> = ({ markdown }) => {
	const CodeBlock = ({ node, inline, className, children, ...props }: any): JSX.Element => {
		const match = /language-(\w+)/.exec(className || '')
		const language = match ? match[1] : null
		const [copied, setCopied] = useState(false)

		const handleCopy = () => {
			navigator.clipboard.writeText(String(children)).then(() => {
				setCopied(true)
				setTimeout(() => setCopied(false), 4000)
			})
		}

		const SyntaxHighlighter = SyntaxHighlighterBase as unknown as React.ComponentType<any>

		if (!inline && language) {
			return (
				<div className="overflow-hidden rounded-md border border-zinc-200">
					<div className="flex items-center justify-between bg-sage-600 px-3 font-mono text-[10px] text-white">
						<span>{language}</span>
						<Button variant="static" size="sm" className="p-0" onClick={handleCopy}>
							{copied ? (
								<div className="flex">
									<Check className="h-3.5 w-3 text-white" />
									<div className="ml-1 text-[10px] text-white">Copied</div>
								</div>
							) : (
								<div className="flex">
									<Copy className="h-3.5 w-3 text-white" />
									<div className="ml-1 text-[10px] text-white">Copy</div>
								</div>
							)}
						</Button>
					</div>
					<SyntaxHighlighter
						style={vscDarkPlus}
						language={language}
						PreTag="div"
						customStyle={{
							margin: 0,
							padding: '1rem',
							fontSize: '0.875rem'
						}}
						{...props}
					>
						{String(children).replace(/\n$/, '')}
					</SyntaxHighlighter>
				</div>
			)
		}

		return (
			<code className={className} {...props}>
				{children}
			</code>
		)
	}

	return (
		<ReactMarkdown
			components={{
				code: CodeBlock
			}}
		>
			{markdown}
		</ReactMarkdown>
	)
}

export default MarkdownWithCode
===== src/hooks/use-copy-to-clipboard.ts =====
import { useCallback, useState } from 'react'

type CopiedValue = string | null
type CopyFn = (text: string) => Promise<boolean>

function useCopyToClipboard(): [CopiedValue, CopyFn] {
	const [copiedText, setCopiedText] = useState<CopiedValue>(null)

	const copy: CopyFn = useCallback(async (text) => {
		if (!navigator?.clipboard) {
			console.warn('Clipboard API not supported')
			return false
		}

		try {
			await navigator.clipboard.writeText(text)
			setCopiedText(text)
			return true
		} catch (error) {
			console.error('Failed to copy:', error)
			setCopiedText(null)
			return false
		}
	}, [])

	return [copiedText, copy]
}

export default useCopyToClipboard
===== src/hooks/use-fetch.ts =====
// Create a reusable hook for fetching data with loading/error states
// Your implementation should handle:
// - Loading state
// - Error state
// - Data state
// - Automatic cleanup
import { useEffect, useState } from 'react'

type User = {
	id: number
	name: string
	email: string
	// Add more properties as needed
}

function useFetch<T>(url: string) {
	const [data, setData] = useState<T | null>(null)
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState<Error | null | unknown>(null)

	useEffect(() => {
		let isCancelled = false

		const fetchData = async () => {
			try {
				setLoading(true)
				const response = await fetch(url)
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`)
				}
				const data = await response.json()
				if (!isCancelled) {
					setData(data)
				}
			} catch (error) {
				if (!isCancelled) {
					setError(error)
				}
			} finally {
				if (!isCancelled) {
					setLoading(false)
				}
			}
		}

		fetchData()

		return () => {
			// Cleanup function to prevent memory leaks
			isCancelled = true
		}
	}, [url])

	return { data, loading, error }
}

// Usage example:
const { data, loading, error } = useFetch<User[]>('/api/users')
===== src/lib/utils.ts =====
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs))
}
===== src/documents/Flavio_Espinoza_Resume_2025.md =====
# Flavio Espinoza

**Senior Frontend Developer**  
Salt Lake City, UT · flavio.espinoza@gmail.com · [github.com/flavioespinoza](https://github.com/flavioespinoza)

---

## Summary

Experienced full-stack developer with 11+ years building performant, accessible, and visually polished user interfaces.  
Recent focus on AI-integrated applications, LLM tooling, and data visualization using modern React, TypeScript, and Next.js frameworks.

---

## Skills

- **Languages & Frameworks:** TypeScript, React, Next.js, JavaScript (ES6+), Tailwind CSS, HTML, CSS
- **Libraries & Tools:** Zustand, Zod, Chart.js, D3.js, PapaParse, Lucide React, OpenAI API, next-themes
- **DevOps & Platform:** Vercel, Git, REST APIs, Node.js
- **AI Integration:** GPT-4o, LLM prompt engineering, dynamic data extraction, Resend (planned)

---

## Recent Work Experience

### Bless Network · Senior Frontend Engineer

**May 2024 – Present**

- Built a modular portfolio and projects showcase with AI-powered data pipelines
- Implemented dynamic theme switching using next-themes and Tailwind CSS
- Exposed GitHub commit history via dynamic `/api/commits` and CSV/JSON export
- Created responsive charts via D3.js from OpenAI-generated structured data
- Configured Open Graph meta tags, Twitter card preview, and custom favicon
- Developed `/contact` page and prepared API integrations for Formspree and Resend

---

## Portfolio Projects

### AI Chat Assistant

- React + TypeScript interface for prompt + response with GPT-4o
- Uses Zustand for message state and theme toggling via next-themes
- Error boundaries, loading states, and minimal UI

### LLM Data Visualizer

- Parses human language prompts using OpenAI and renders interactive bar/line/pie charts via D3.js
- Supports dark mode, CSV export, iframe embedding, and data cleaning logic
- Responsive chart rendering and grouped analytics via Day.js

---

## Awards & Recognition

- First Place – SECCA International Design Competition (MIT Press Publication)
- Environ Design 8 Speaker | Scope-Hamptons Artist | Published with MIT Press

---

## Education

**Master of Architecture** – University of Utah, 2000
===== src/documents/flavio_espinoza_resume_schema.json =====
{
	"@context": "https://schema.org",
	"@type": "Person",
	"name": "Flavio Espinoza",
	"email": "mailto:flavio.espinoza@gmail.com",
	"url": "https://my-portfolio.vercel.app",
	"sameAs": ["https://github.com/flavioespinoza", "https://linkedin.com/in/flavioespinoza"],
	"jobTitle": "Senior Frontend Developer",
	"address": {
		"@type": "PostalAddress",
		"addressLocality": "Salt Lake City",
		"addressRegion": "UT",
		"addressCountry": "US"
	},
	"alumniOf": {
		"@type": "EducationalOrganization",
		"name": "University of Utah"
	},
	"worksFor": {
		"@type": "Organization",
		"name": "Bless Network"
	},
	"hasOccupation": {
		"@type": "Occupation",
		"name": "Frontend Engineer",
		"skills": [
			"React",
			"Next.js",
			"TypeScript",
			"Tailwind CSS",
			"D3.js",
			"OpenAI API",
			"Zustand",
			"Zod",
			"Vercel"
		]
	},
	"description": "Senior full-stack engineer with 11+ years of experience delivering responsive, performant, and accessible UI with React, TypeScript, and modern frameworks. Recent focus on LLM-powered applications using GPT-4o and D3.js for real-time visualization."
}
===== src/redux/wallet-slice.ts =====
// Create a Redux slice for managing wallet connection state
// Requirements:
// - State: address, chainId, isConnecting, error
// - Actions: connect, disconnect, switchChain
// - Async thunk for connecting wallet
import { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { BrowserProvider } from 'ethers'

// For Ethereum interaction
declare global {
	interface Window {
		ethereum?: any
	}
}

interface WalletState {
	address: string | null
	chainId: number | null
	isConnecting: boolean
	isConnected: boolean
	error: string | null
}

const initialState: WalletState = {
	address: null,
	chainId: null,
	isConnecting: false,
	isConnected: false,
	error: null
}

// Create async thunk for connecting
export const connectWallet = createAsyncThunk('wallet/connect', async (_, { rejectWithValue }) => {
	try {
		if (!window.ethereum) {
			throw new Error('Web3 provider not found')
		}

		const provider = new BrowserProvider(window.ethereum) 
		const accounts = await provider.send('eth_requestAccounts', [])
		if (!accounts) {
			throw new Error('Unable to connect to Ethereum')
		}

		const network = await provider.getNetwork()

		return {
			address: accounts[0],
			chainId: Number(network.chainId)
		}
	} catch (error: any) {
		return rejectWithValue(error.message || 'Failed to connect to Ethereum')
	}
})

const walletSlice = createSlice({
	name: 'wallet',
	initialState,
	reducers: {
		disconnect: (state) => {
			state.address = null
			state.chainId = null
			state.isConnected = false
			state.error = null
		},
		switchChain: (state, action: PayloadAction<number>) => {
			state.chainId = action.payload
		}
	},
	extraReducers: (builder) => {
		builder
			.addCase(connectWallet.pending, (state) => {
				state.isConnecting = true
				state.error = null
			})
			.addCase(connectWallet.fulfilled, (state, action) => {
				state.address = action.payload.address
				state.chainId = action.payload.chainId
				state.isConnecting = false
				state.isConnected = true
			})
			.addCase(connectWallet.rejected, (state, action) => {
				state.error = action.payload as string
				state.isConnecting = false
			})
	}
})

export const { disconnect, switchChain } = walletSlice.actions
export default walletSlice.reducer
===== src/redux/hooks.ts =====
import { useDispatch, useSelector, useStore } from 'react-redux'
import type { AppDispatch, AppStore, RootState } from './store'

// Use throughout your app instead of plain `useDispatch` and `useSelector`
export const useAppDispatch = useDispatch.withTypes<AppDispatch>()
export const useAppSelector = useSelector.withTypes<RootState>()
export const useAppStore = useStore.withTypes<AppStore>()
===== src/redux/store.ts =====
import walletReducer from '@/redux/wallet-slice'
import { configureStore } from '@reduxjs/toolkit'

export const makeStore = () => {
	return configureStore({
		reducer: {
			wallet: walletReducer
		}
	})
}

// Infer types
export type AppStore = ReturnType<typeof makeStore>
export type RootState = ReturnType<AppStore['getState']>
export type AppDispatch = AppStore['dispatch']
===== src/store/chat-store.ts =====
import { create } from 'zustand'
import { persist } from 'zustand/middleware'

export type Message = {
	role: 'user' | 'assistant'
	text: string
	createdAt: string
	feedback?: 'up' | 'down'
}

interface ChatState {
	messages: Message[]
	addMessage: (message: Message) => void
	setMessages: (messages: Message[]) => void
	clearMessages: () => void
	updateMessageFeedback: (index: number, feedback: 'up' | 'down') => void
}

export const useChatStore = create<ChatState>()(
	persist(
		(set) => ({
			messages: [],
			addMessage: (message) =>
				set((state) => ({
					messages: [...state.messages, message]
				})),
			setMessages: (messages) => set({ messages }),
			clearMessages: () => set({ messages: [] }),
			updateMessageFeedback: (index, feedback) =>
				set((state) => {
					const updatedMessages = state.messages.map((msg, i) => {
						if (i === index) {
							return { ...msg, feedback }
						}
						return msg
					})
					return { messages: updatedMessages }
				})
		}),
		{
			name: 'chat-messages'
		}
	)
)
===== src/store/multi-agent-store.ts =====
import { create } from 'zustand'

interface AgentState {
	topic: string
	loading: boolean
	results: {
		research: string
		content: string
		review: string
	} | null
	activeAgent: string | null
	error: string | null
	setTopic: (topic: string) => void
	setLoading: (loading: boolean) => void
	setResults: (results: any) => void
	setActiveAgent: (agent: string | null) => void
	setError: (error: string | null) => void
	reset: () => void
}

export const useMultiAgentStore = create<AgentState>((set) => ({
	topic: '',
	loading: false,
	results: null,
	activeAgent: null,
	error: null,
	setTopic: (topic) => set({ topic }),
	setLoading: (loading) => set({ loading }),
	setResults: (results) => set({ results }),
	setActiveAgent: (activeAgent) => set({ activeAgent }),
	setError: (error) => set({ error }),
	reset: () =>
		set({
			topic: '',
			loading: false,
			results: null,
			activeAgent: null,
			error: null
		})
}))
